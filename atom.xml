<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ethanyi&#39;s Blog</title>
  
  
  <link href="http://ethanyi9.gitee.io/ethanyi9/atom.xml" rel="self"/>
  
  <link href="http://ethanyi9.gitee.io/ethanyi9/"/>
  <updated>2021-05-25T03:38:17.149Z</updated>
  <id>http://ethanyi9.gitee.io/ethanyi9/</id>
  
  <author>
    <name>ethanyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言的学习</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/05/25/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/05/25/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2021-05-25T03:38:17.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="算数平移和逻辑平移"><a href="#算数平移和逻辑平移" class="headerlink" title="算数平移和逻辑平移"></a>算数平移和逻辑平移</h2><p>关于这个平移问题，分为算术左右移和逻辑左右移</p><h3 id="算术左移和逻辑左移："><a href="#算术左移和逻辑左移：" class="headerlink" title="算术左移和逻辑左移："></a>算术左移和逻辑左移：</h3><p>只要数字向左移动一位就好了，然后右边补0，其他都不用管</p><h3 id="算术右移和逻辑右移："><a href="#算术右移和逻辑右移：" class="headerlink" title="算术右移和逻辑右移："></a>算术右移和逻辑右移：</h3><p>逻辑右移是很正常的，也就是只要向右移动，补补0就好了</p><p><strong>而算术右移就不一样！</strong></p><p>只有算术右移，是让符号位一起走</p><ul><li>向右移动，并且补的是和符号位是一样的</li></ul><p>也就是说要不是全补0要不是全补1</p><h2 id="IEEE浮点数编码"><a href="#IEEE浮点数编码" class="headerlink" title="IEEE浮点数编码"></a>IEEE浮点数编码</h2><p>首先你要知道怎么是一个小数的十进制变二进制</p><p>但我觉得我已经知道了我就不讲了</p><h3 id="32位编码格式"><a href="#32位编码格式" class="headerlink" title="32位编码格式"></a>32位编码格式</h3><p>对于一个32位的浮点数，它的编码格式</p><p>在32位二进制串中，阶码部分用8位来存储，尾数部分用23位来存储，还有1位是符号位。</p><p>讲起来有点麻烦我直接上例子</p><p>例：12.25按照32位IEEE编码</p><ul><li>符号位</li></ul><p>12.25变成二进制：1100.01</p><p>因为是正数，符号位是0</p><ul><li>阶码</li></ul><p>阶码部分是这样的：</p><p>因为是1100.01，按照规则这是<br>$$<br>1.10001*2^3<br>$$<br>所以我们知道阶码数是127+3=130 （这是规定我也不知道为什么是这样）</p><p>130再变为二进制为：10000011</p><p>阶码也是8位，这个就是阶码</p><ul><li>尾数部分</li></ul><p>尾数是我们之前的<br>$$<br>1.10001*2^3<br>$$<br>中的小数点后面的部分：10001</p><p>又因为是 23位的尾数部分</p><p>所以是10001000000000000000000（共23位）</p><p>所以这个数是</p><p>0 10000011 10001000000000000000000</p><h3 id="32位编码格式-1"><a href="#32位编码格式-1" class="headerlink" title="32位编码格式"></a>32位编码格式</h3><p>64位的阶码是+1023</p><p>64位的编码部分是</p><p>1         11         52</p><h2 id="关于一个字节为什么是-128到127"><a href="#关于一个字节为什么是-128到127" class="headerlink" title="关于一个字节为什么是 -128到127"></a>关于一个字节为什么是 -128到127</h2><p>补码的好处：</p><p>首先加入没有补码，+0 在计算机中的表示0 000 0000. -0 在计算机中的表示1 000 0000. 并不一致。</p><p>如果采用补码-0 的补码就是 0 000 0000. 两者一致</p><p>其次我们知道8位二进制的表示形式总共有0000 0000-1111 1111 那么多，恰好是2^8=256. 也就是说理论上可以表示256个十进制数字。我们前面知道，-0 在计算机中如果再用原码 就是1 000 0000 。如果采用反码就是1 111 1111. 会多占用一个表达。</p><p>所以如果采用补码就可以把1 000 0000 这个表达空出来表示一个十进制数字。 很显然用它来表示-128 最为合理。</p><p>还可以从另外一个角度来理解： -127 的补码是1000 0001.再减去1 就是1000 0000 。那-127-1=-128.</p><p>所以补码的好处就是计算机的表达位数可以充分利用表示跟多的十进制数。</p><h2 id="关于汇编指令"><a href="#关于汇编指令" class="headerlink" title="关于汇编指令"></a>关于汇编指令</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>要学指令首先要弄懂这些寄存器</p><p>8086/8088 CPU的寄存器共有14个，都是16位的寄存器，根据用途分为<strong>数据寄存器</strong>、<strong>段寄存器</strong>、<strong>地址寄存器</strong>和<strong>控制寄存器</strong>4种类型。</p><p>不过太多了，我挑几个重要的讲：</p><ul><li>数据寄存器</li></ul><p>数据寄存器包括EAX、EBX、ECX 、EDX四个通用寄存器，用于存放计算过程中所用的操作数、结果等信息，即是存放数据的寄存器。</p><p><img src="/ethanyi9/.io//Users\ethanyi\AppData\Roaming\Typora\typora-user-images\image-20210518180738353.png" alt="image-20210518180738353"></p><ul><li><p>指针寄存器</p><p>这个就是指向的一些东西的寄存器</p><p>ESI：源变址寄存器，可用于存放源缓冲区的偏移地址。<br>EDI：目的变址寄存器，可用于存放目的缓冲区的偏移地址。<br>ESP：堆栈指针寄存器，用于指出堆栈区栈顶的偏移地址。<br>EBP：基址指针寄存器，用于指出堆栈区某个单元的偏移地址。</p></li><li><p>控制寄存器</p></li></ul><p>控制寄存器包括指令指针寄存器IP和标志寄存器FR，用来控制程序的执行。</p><ol><li><p>指令指针寄存器IP（Instruction Pointer）<br>指出当前正在执行指令的<strong>下一条指令</strong>所在单元的偏移地址。</p></li><li><p>标志寄存器FR（Flag Register）<br>标志寄存器FR共有有效标志位9个。</p><p>下面这些了解就好了</p><p><strong>状态标志：</strong></p><p>C：最高位产生借位或进位标志。进位C=1</p><p>O：溢出标志。溢出O=1</p><p>Z：零标志。结果为0则Z=1</p><p>S：符号标志。就是结果的符号位。</p><p>P：奇偶标志。低8位中1的个数为偶数P=1</p><p>A：辅助进位标志。低半字节向高半字节有进位或借位，A=1</p><p><strong>控制标志：</strong></p><p>D：方向标志。D=1时串操作时自动减量</p><p>I：中断标志。I=1时允许CPU接收外部的中断请求</p><p>T：陷阱标志。T=1时进入单步调试状态。</p></li></ol><h2 id="指令部分"><a href="#指令部分" class="headerlink" title="指令部分"></a>指令部分</h2><p>某些指令的差别就在会不会影响标志位或者会不会保存结果</p><h3 id="关于有些不好记的指令"><a href="#关于有些不好记的指令" class="headerlink" title="关于有些不好记的指令"></a>关于有些不好记的指令</h3><p>SHL（shift logical left）: 逻辑左移<br>        SAL  (shift arithmetic left )：算术左移<br>        SHR  (shift logical right)：逻辑右移<br>        SAR  (shift arithmetic right)：算术右移</p><p>ROL  (rotate left)：循环左移<br>        ROR  (rotate right)：循环右移<br>        RCL  (rotate left through carry)：带进位循环左移<br>        RCR  (rotate right through carry) ：带进位循环右移</p><h3 id="影响标志位"><a href="#影响标志位" class="headerlink" title="影响标志位"></a>影响标志位</h3><p>add和lec</p><p>sub和dec</p><p>这两个是前者影响标志位，后者不影响</p><h3 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h3><p>test和add</p><p>cmp和sub</p><p>前者保存数据，后者不保存</p><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p>是寻<strong>操作数</strong>的地址的方式</p><p>立即数寻址、寄存器寻址、存储器寻址</p><p>寄存器寻址：直接弄出来了寄存器中的数值，比如eax直接是指eax里面的数</p><p>存储器寻址：有直接、间接、基址</p><p>储存器寻址中：直接就是直接拿地址过来：[1000H]这种</p><p>间接： [eax] 也就是说要的不是eax中的值，要的是eax中这个表示了地址，再向内存中找这个地址</p><p>基址：[eax+1000H]这种，也就是把两种结合</p><h3 id="关于汇编语言的条件判断"><a href="#关于汇编语言的条件判断" class="headerlink" title="关于汇编语言的条件判断"></a>关于汇编语言的条件判断</h3><p>C语言条件跳转中<code>a&lt;b</code>对应的汇编的汇编代码是</p><p>mov eax, [a]; </p><p>cmp eax, [b];  //先比较a和b</p><p>jge XXX;  //如果a&gt;=b就跳到什么地方去</p><p>因为汇编和C语言好像是翻译上的不一样</p><p>在C语言中如果是a&gt;b</p><p>那么在汇编语言中就是a&lt;=b    </p><p>顺便一说，这个跳转指令自己就是个条件跳转，根据的是标志位的变动</p><p>A&gt;B：JG         （JNLE）<br>        A≥B：JGE       （JNL）<br>        A&lt;B：JL          （JNGE）<br>        A≤B：JLE        （JNG）</p><h2 id="函数的形成和原理"><a href="#函数的形成和原理" class="headerlink" title="函数的形成和原理"></a>函数的形成和原理</h2><h3 id="函数的一些小知识"><a href="#函数的一些小知识" class="headerlink" title="函数的一些小知识"></a>函数的一些小知识</h3><ul><li><p>函数参数的传递顺序：</p><p>从右往左传递参数</p></li><li><p>不可以指令的两边都是要访问内存的变量</p></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈在内存里面，并且这个数据的在地址中的顺序是从大到小这个方向在存储</p><p>从栈底到栈顶是逐渐变小的过程</p><p><img src="/ethanyi9/.io//Users\ethanyi\AppData\Roaming\Typora\typora-user-images\image-20210521194222707.png" alt="image-20210521194222707"></p><ul><li><p>函数开辟栈的指令:  push ebp ; </p><p>​                                  mov ebp,esp;</p></li><li><p>关闭栈的指令： mov esp,ebp; </p><p>​                            pop ebp; </p></li><li><p>call指令：先把这个call指令的下一个指令入栈，然后再跳转到call指令这个指令的里面的那个指令里面</p></li></ul><h4 id="调用栈的步骤"><a href="#调用栈的步骤" class="headerlink" title="调用栈的步骤"></a>调用栈的步骤</h4><ol><li>开辟栈，注意每个栈的ebp都代表的是上一个栈的东西，有点像是在保存前任的东西</li><li>把栈的大小决定，然后再压入ebx，esi、edi</li><li>开始初始化栈，把栈里面全部的储存空间都变成一模一样的数字</li><li>把变量弄进栈，在edi的后面</li><li>当要调用函数的时候，call函数把eip的值入栈，放在edi后面(或者是在变量后面)</li><li>函数重新开一个栈，又是把main函数的ebp先存起来</li><li>ret相当于 pop eip，把eip有弄回正道</li><li>最后栈平衡，目前来说就是有几个变量esp就往回加几个</li></ol><h4 id="栈平衡："><a href="#栈平衡：" class="headerlink" title="栈平衡："></a><strong>栈平衡</strong>：</h4><p>不同的两次函数调用，所形成的栈帧也不相同。当由一个函数进入到另一个函数中时，就会针对调用的函数开辟出其所需的栈空间，形成此函数的栈。</p><p>当这个函数结束调用时需要清除掉它所使用的栈空间，关闭栈帧，我们把这一过程称为栈平衡。</p><h4 id="对于函数调用，有三种不同的调用方式"><a href="#对于函数调用，有三种不同的调用方式" class="headerlink" title="对于函数调用，有三种不同的调用方式"></a>对于函数调用，有三种不同的调用方式</h4><p>stdcall、cdecl、fastcall，这三个东西主要的区别在，是哪个部分实现的栈平衡</p><p><img src="/ethanyi9/.io//Users\ethanyi\AppData\Roaming\Typora\typora-user-images\image-20210521195013771.png" alt="image-20210521195013771"></p><p><strong>只有cdecl 可以弄不定参数的函数</strong>，并且也只有它是由调用方，也就是说是call那个函数的那边来平衡栈，其他的都是要函数这边来平衡</p><p><strong>fastcall使用寄存器来传参</strong></p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>函数的返回值一般是在寄存器eax上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h1&gt;&lt;h2 id=&quot;算数平移和逻辑平移&quot;&gt;&lt;a href=&quot;#算数平移和逻辑平移&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="汇编语言" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="知识" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>关于win系统中powershell的美化</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/04/30/%E5%85%B3%E4%BA%8Epowershell/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/04/30/%E5%85%B3%E4%BA%8Epowershell/</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2021-04-30T15:48:07.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  在花猪的带领下，学会了关于我电脑的powershell的美化，太香了</p><h1 id="特别感谢博客"><a href="#特别感谢博客" class="headerlink" title="特别感谢博客"></a>特别感谢博客</h1><p><a href="https://akilar.top/posts/8a76eb87/">https://akilar.top/posts/8a76eb87/</a></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>我觉得上文的那个文章里面写的很好了我就不写了</p><h1 id="有些bug的更改"><a href="#有些bug的更改" class="headerlink" title="有些bug的更改"></a>有些bug的更改</h1><p>你在按照教程</p><p>在powershell上使用命令打开.ps1文件的时候，输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure><p>命令”Set-Theme Agnoster”是旧版本的命令（这个版本是oh-my-posh的版本），对于新版本，也就是V3版本的oh-my-posh来说</p><p>命令应该是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-PoshPrompt</span> <span class="literal">-Theme</span> agnoster</span><br></pre></td></tr></table></figure><p>然后问题就解决了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  在花猪的带领下，学会了关于我电脑的powershell的美化，太香了&lt;/p&gt;
&lt;h1 id=&quot;特别感谢博客&quot;&gt;&lt;a href=&quot;#特别感</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="powershell" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/powershell/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>(pip)关于代理安装问题</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/04/12/%E5%85%B3%E4%BA%8Epip/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/04/12/%E5%85%B3%E4%BA%8Epip/</id>
    <published>2021-04-11T16:00:00.000Z</published>
    <updated>2021-04-12T12:30:38.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  研究同学的项目，想要通过pip下载导入包的时候，出现了错误</p><h1 id="Failed-to-establish-a-new-connection-WinError-10061-由于目标计算机积极拒绝，无法连接。’-’-simple-flask-migrate"><a href="#Failed-to-establish-a-new-connection-WinError-10061-由于目标计算机积极拒绝，无法连接。’-’-simple-flask-migrate" class="headerlink" title="Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。’))’: /simple/flask-migrate/"></a>Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。’))’: /simple/flask-migrate/</h1><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412201816.png"></p><p>在网上一番搜索了之后，发现是显示无法连接到代理的问题</p><p>解决方法也很简单：通过修改注册表中的代理设置</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>快捷键【win】+【R】输入regedit 打开注册表编辑器</p><p>打开【HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings】路径</p><p>选择关于代理的设置：【ProxyEnable】设置变为【0】</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412202407.png"></p><p>再使用pip的时候，就发现已经没问题了</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412202551.png"></p><p>参考链接：<a href="https://blog.csdn.net/m0_37811192/article/details/89411415">https://blog.csdn.net/m0_37811192/article/details/89411415</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  研究同学的项目，想要通过pip下载导入包的时候，出现了错误&lt;/p&gt;
&lt;h1 id=&quot;Failed-to-establish-a-new-</summary>
      
    
    
    
    <category term="代理" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E4%BB%A3%E7%90%86/"/>
    
    <category term="pip" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E4%BB%A3%E7%90%86/pip/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>关于npm的一些安装问题</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/03/22/%E5%85%B3%E4%BA%8Enpm/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/03/22/%E5%85%B3%E4%BA%8Enpm/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-22T17:23:37.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>换了一台电脑后，关于nodejs，每次弄npm安装插件都有一大堆报错和warning，这里稍微整理一下，方便以后使用npm</p><h1 id="“npm-WARN-requires-a-peer-of-XXX“问题"><a href="#“npm-WARN-requires-a-peer-of-XXX“问题" class="headerlink" title="“npm WARN requires a peer of XXX“问题"></a>“npm WARN requires a peer of XXX“问题</h1><p> 在NodeJs开发中，往往需要安装各种依赖包，而有时候这些依赖包版本更新了或者改成了另外一个包名，导致npm install会报“requires a peer of XXX”之类的warning。</p><p>我这次下载artitalk插件就是这个问题</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210322235444.png"></p><p>解决方法，就是缺啥就补啥，命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &quot;XXX&quot;</span><br></pre></td></tr></table></figure><p>其中“xxx”是你所缺少的模块，比如对于我这次缺少的模块，我的命令就为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &quot;typescript@&gt;=<span class="number">2</span>.<span class="number">7</span>&quot;</span><br></pre></td></tr></table></figure><p>安装后就不会报错了</p><h1 id="npm-WARN-saveError-ENOENT-no-such-file-or-directory-open-‘C-Users-package-json’问题"><a href="#npm-WARN-saveError-ENOENT-no-such-file-or-directory-open-‘C-Users-package-json’问题" class="headerlink" title="npm WARN saveError ENOENT: no such file or directory, open ‘C:\Users...\package.json’问题"></a>npm WARN saveError ENOENT: no such file or directory, open ‘C:\Users...\package.json’问题</h1><p>根据错误提示，这个问题主要是缺少”package.json”文件所导致的，这个文件的作用是管理你本地安装的npm包</p><p>解决的方法，创建”package.json”文件，使用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>系统会给你提示来让你输入相关的配置，便于你自己配置，但对一些新手（比如我）来说，这样过于复杂，也怕自己改错什么配置</p><p>所以还可以使用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>它可以一次性将所有默认配置都写入文件，直接创建”package.json”文件，还挺方便的，使用如下</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323001342.png"></p><h1 id="npm-warn-package-json-1-0-0-no-repository-field问题"><a href="#npm-warn-package-json-1-0-0-no-repository-field问题" class="headerlink" title="npm warn package.json @1.0.0 no repository field问题"></a>npm warn package.json @1.0.0 no repository field问题</h1><p>npm安装时总是报这个错，但是其实是安装成功的</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323004816.png"></p><p>看问题可以知道应该是package.json里缺少 repository的问题，所以我们添加上就ok了</p><p>有大佬说这里是缺少项目的仓库字段，如下这种：</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http://baidu.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>但如果只是练习自己用的话，只需要在package.json里做下面的配置就好了</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;private&quot;: true,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>这样就是把项目设置为私有来避开warning</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323010224.png"></p><p>同理，npm WARN <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x31;&#x2e;&#x30;&#x2e;&#x30;">&#114;&#111;&#111;&#116;&#64;&#x31;&#x2e;&#x30;&#x2e;&#x30;</a> No description也只需把description的值不为空就行了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本文持续更新中……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;换了一台电脑后，关于nodejs，每次弄npm安装插件都有一大堆报错和warning，这里稍微整理一下，方便以后使用npm&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="npm" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/npm/"/>
    
    
    <category term="npm" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/npm/"/>
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于安装burp suite抓包工具</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/03/18/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/03/18/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</id>
    <published>2021-03-17T16:00:00.000Z</published>
    <updated>2021-03-18T16:37:37.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于一些原因换了台电脑，之前的抓包工具也没有了，所以想要重新下载burp suite来进行抓包测试</p><p>以下的教程很大部分参考了<a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a> 的内容，只是针对我自己的一些问题进行了阐述，并且总结了一些东西</p><h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a> 中有着百度云链接，里面有着java的jdk8版本，以及破解的burp软件</p><p>注1：因为burp suite的底层是用java程序编写，所以burp软件只能在java的环境里面运行，因此需要先搭建java环境</p><p>注2：对于上方的资源而言，如果jdk过于新( 比如说是jdk15)，那会导致有些操作无法执行而根本没办法运行burp suite</p><h1 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h1><p>主要涉及了jdk和jre的安装以及环境变量的配置</p><h2 id="jdk-8u201-windows-x64安装"><a href="#jdk-8u201-windows-x64安装" class="headerlink" title="jdk-8u201-windows-x64安装"></a>jdk-8u201-windows-x64安装</h2><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545%E4%B8%AD%E5%BE%88%E8%AF%A6%E7%BB%86">https://blog.csdn.net/LUOBIKUN/article/details/87457545中很详细</a></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>按下win键搜索“编辑系统环境变量”</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210318233610723.png"></p><p>点击环境变量，进入界面</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/QQ%E6%88%AA%E5%9B%BE20210318233846.png"></p><p>如我图所示，</p><blockquote><p>①在“系统变量”中创建“JAVA_HOME”，值为java的jdk安装的路径</p><p>②在path变量里书写%JAVA_HOME%\bin 和 %JAVA_HOME%\jre\bin</p><p>当然这个也要具体看你的jdk和jre的路径，比如我的jre是在jdk里面，如果你的你的jdk和jre是在同一个目录下，那就是直接弄绝对路径也可以</p><p>③在“系统变量”中创建“CLASSPATH”，变量值填写 “.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar”</p></blockquote><h1 id="安装burp-suite"><a href="#安装burp-suite" class="headerlink" title="安装burp suite"></a>安装burp suite</h1><p>在下载好的压缩包里面有burp-loader-keygen.jar，将其打开后按照<a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545%E7%9A%84%E6%95%99%E7%A8%8B%E8%B5%B0%E5%B0%B1%E8%A1%8C%E4%BA%86">https://blog.csdn.net/LUOBIKUN/article/details/87457545的教程走就行了</a></p><p>并且下载出来的是汉化版本</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210318235702.png"></p><h1 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h1><p>我是直接用的Firefox浏览器，比较方便设置代理和导入证书</p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>在设置代理之前，要先记得在burp suite的界面中先把默认代理的接口勾上(我这里因为8080接口被占用了所以换了一个接口)</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000945.png"></p><p>然后打开firefox的设置界面(选项界面)，搜索“网络设置”，打开</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000112.png"></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000200.png"></p><p>此时完成了代理，此时已经可以尝试着抓包了</p><h2 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h2><p>我们在第一次抓包的时候总是会遇到『您的连接不是私密连接』（Chrome）、『此网站的安全证书存在问题』（IE）或者『您的连接不安全』（Firefox）的问题</p><p>对于这种解决方式，就是导入证书，原理我暂时也不是很懂，之后学懂的话我再在这个地方进行解释吧</p><p>导入证书步骤：</p><p>​    1）先开启burp suite的代理服务器并在浏览器里打开代理，访问<a href="http://burp,此时会出现一个和burp相关的界面,点击右上角/">http://burp，此时会出现一个和burp相关的界面，点击右上角</a></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319001616.png"></p><p>此时会提醒你下载证书，下载即可</p><p>​    2）导入证书，在Firefox的设置界面搜索“证书”，点击“导入”</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319002000.png"></p><p>跳出的界面<img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319002307.png"></p><p>现在你就可以抓以https开头的包了！</p><p>参考资料：</p><p><a href="https://www.anquanke.com/post/id/85925">https://www.anquanke.com/post/id/85925</a></p><p><a href="https://blog.csdn.net/zyw_anquan/article/details/47904495">https://blog.csdn.net/zyw_anquan/article/details/47904495</a></p><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于一些原因换了台电脑，之前的抓包工具也没有了，所以想要重新下载burp suite来进行抓包测试&lt;/p&gt;
&lt;p&gt;以下的教程很大部分参考了&lt;</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="burp suite" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/burp-suite/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的基本使用</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/03/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/03/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-14T02:53:45.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。</p><h2 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h2><p>正则表达式可以把它看做是一种通配符的增强版，它可以帮你匹配你想要的字符串。</p><p>在很多地方可以用到正则表达式，比如编译器中的词法分析器、网址上的注册表单、爬虫中用正则表达式来提取信息等等。所以我们可以更加深刻地理解正则表达式的用处之广，好多地方都不能缺少它。</p><p>以下是正则表达式正式内容，一些最基础的用法。</p><h1 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h1><p>限定符是一类特殊的字符，以下归纳：</p><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>?</td><td>表示之前的字符出现零次或者一次</td><td>end? –&gt; 表示en或者end</td></tr><tr><td>*</td><td>表示之前的字符出现零次或者多次</td><td>end* –&gt; 表示en或者enddddd 都行</td></tr><tr><td>+</td><td>表示之前的字符出现一次或者多次</td><td>end+ –&gt; 表示end或者endddddd</td></tr><tr><td>{…}</td><td>之中可以精确表示字符出现的次数</td><td>en{2}d –&gt; 表示ennd     en{2,3}d –&gt; 表示ennd或者ennnd</td></tr></tbody></table><p>如果想要限定多个运算符，比如ab，就直接打上括号再添加符号就行了，比如(ab)? 就表示 ab 或者空字符串。</p><h1 id="“或”运算符"><a href="#“或”运算符" class="headerlink" title="“或”运算符"></a>“或”运算符</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>|</td><td>两者之间的取或</td><td>a (cat|dog) –&gt; a cat 或者 a dog</td></tr></tbody></table><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>[…]</td><td>匹配 <strong>[…]</strong> 中的所有字符</td><td>[abc] 会匹配所有字符串中的a,b,c 的字符</td></tr><tr><td>[^…]</td><td>表示匹配除了[…]中字符以外的所有字符串</td><td>[^abc]会匹配所有字符串中除了a,b,c 的字符</td></tr></tbody></table><p>注：[a-z]表示所有的小写字符，[A-Z]表示所有大写字符，[a-zA-Z0-9]表示所有的英文字符和数字</p><p>[^0-9]表示所有的非数字字符(包括换行符)</p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符是一组正则表达式中预先定义好的一系列常用字符类型，比如数字、空白符、单词开头、单词结尾等。这些元字符中的大多数以反斜杠\ 开头</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>所有数字字符，等同于[0-9]</td></tr><tr><td>\w</td><td>单词字符，表示所有英文字符、数字和下划线</td></tr><tr><td>\s</td><td>空白符，包含tab字符以及换行符</td></tr><tr><td>\D</td><td>表示所有<strong>非数字字符</strong></td></tr><tr><td>\W</td><td>表示所有<strong>非单词字符</strong></td></tr><tr><td>\S</td><td>表示所有<strong>非空白字符</strong></td></tr><tr><td>.</td><td>表示所有任意的字符(不包括换行符)</td></tr><tr><td>^</td><td>匹配行首，^a 表示匹配所有行首的a</td></tr><tr><td>$</td><td>匹配行尾，a$表示匹配所有行尾的a</td></tr></tbody></table><h1 id="贪婪匹配和懒惰匹配-lazy-match"><a href="#贪婪匹配和懒惰匹配-lazy-match" class="headerlink" title="贪婪匹配和懒惰匹配(lazy match)"></a>贪婪匹配和懒惰匹配(lazy match)</h1><p>之前讲述?+{}之类的限定符的时候，都是默认匹配尽可能多的字符</p><p>比如我想要限定HTML文本中的字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用&lt;.*&gt; 来进行匹配，结果匹配下来的字符串会是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为默认的贪婪匹配(greedy match)会匹配尽可能多的字符串，所以匹配了第一个</p><p>的左边”&lt;”和第二个</p><p>右边的”&gt;” 中间的所有字符串</p><p>解决方法：</p><p>使用&lt;.*?&gt;来讲贪婪匹配(greedy match)变成懒惰匹配(lazy match)</p><p>这样的话，匹配出来的字符串就会变成”p”和”p”两个标签</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846">https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式是什么&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="正则表达式" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="正则表达式" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于git的基本使用</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/02/25/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/02/25/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2021-03-12T15:02:04.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>git安装：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h2 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h2><ul><li>下载好Git后，点击右键，打开git bash here</li></ul><ul><li><p>开始绑定用户名和邮箱（注：用户名是你GitHub的用户名，邮箱是你GitHub的绑定邮箱，上传到gitee的话同理）</p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.name &quot;你的用户名&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225171909368.png"></p><h2 id="SSHkey-设置"><a href="#SSHkey-设置" class="headerlink" title="SSHkey 设置"></a>SSHkey 设置</h2><ul><li><p>在git bash中输入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -(路径) -&quot;github绑定邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p>​        注：路径是指C盘或者D盘路径</p><p>​        例如：ssh-keygen -t rsa -C -“<a href="mailto:&#x31;&#x33;&#49;&#x36;&#x35;&#x39;&#x34;&#49;&#x31;&#53;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#x31;&#x33;&#49;&#x36;&#x35;&#x39;&#x34;&#49;&#x31;&#53;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>“</p><p>​    输入后git bash中会有三次提醒输入操作<br>​            1）是路径确认，直接按回车存默认路径即可<br>​            2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦;<br>​            3）确认密码,直接回车键</p><p>​    （也就是说三次回车）</p><p>​    之后电脑C盘路径C:\Users\Administrator（电脑名）.ssh 下会生成 id_rsa.pub 文件，将其中内容复制下来</p><ul><li>在github上找到设置界面，找到其中的”SSH and GPG keys”，点击New SSH key</li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/2.png"></p><ul><li><p>在key输入框中将之前复制的内容输入，title可自定义<img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225173650772.png"></p><p>结束后即SSH keys绑定成功，前期所有准备结束</p></li></ul><h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><h2 id="git本地"><a href="#git本地" class="headerlink" title="git本地"></a>git本地</h2><ul><li><p>首先创建一个文件夹，文件夹中是我们已经写好的代码，之后Git命令操作都基于此文件夹</p><p>在文件夹路径下打开git bush</p><p>输入命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>初始化成功后原文件夹里多了一个隐藏文件夹.git </p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>即可上传 （代表将此文件夹里面的所有文件都保存在暂存区中）</p><p>然后以后的修改使用commit命令进行提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这里是备注内容&quot;</span><br></pre></td></tr></table></figure><p>这是将修改的内容提交到本地仓库</p><p>注：add是将代码提交到我们所谓的“缓存区”，而commit则是将我们在缓存区的代码提交到本地仓库。</p><p>​        git有好几个区，工作区（workspace）、暂存区（index）、本地仓库（local repository）、还有远程仓库（remote repository）</p></li></ul><h2 id="git提交到远程"><a href="#git提交到远程" class="headerlink" title="git提交到远程"></a>git提交到远程</h2><ul><li><p>在github上创建仓库</p></li><li><p>找到创建的仓库的地址(http地址、ssh地址)</p></li><li><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 你复制的地址</span><br></pre></td></tr></table></figure><p>注：创建了一个远程仓库名叫origin，和GitHub上的仓库建立了联系</p></li><li><p>最后，将本地仓库的代码传输到GitHub的仓库上，输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>至此，代码到GitHub转换成功</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="git" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/git/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="git" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的博客搭建</title>
    <link href="http://ethanyi9.gitee.io/ethanyi9/2021/02/24/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://ethanyi9.gitee.io/ethanyi9/2021/02/24/%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-24T06:31:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于hexo的博客搭建"><a href="#关于hexo的博客搭建" class="headerlink" title="关于hexo的博客搭建"></a>关于hexo的博客搭建</h1><h1 id="关于前言"><a href="#关于前言" class="headerlink" title="关于前言"></a>关于前言</h1><p>这是我第一次的博客介绍，仅供参考</p><p>这个博客的搭建弄了很多天，因为之前电脑总是经历了千奇百怪的bug，但在朋友的帮助下还是成功（应该算是成功吧）把这个博客搭建了起来。仔细一想好像真的白嫖了好多东西哈哈。</p><hr><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>node.js下载、git安装</p><p>推荐教程：<a href="https://blog.csdn.net/antma/article/details/86104068">https://blog.csdn.net/antma/article/details/86104068</a>   node.js安装</p><p>​                    <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a>    git安装</p><ul><li><p>注1：由于node.js版本过高的话会和hexo版本发生冲突导致报错，推荐node版本不超过12.x版本，可以使用nvm进行版本控制，</p><p>nvm的教程：<a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a> </p><p>当然也可以寻找其他版本的教程</p></li><li><p>注2：nodejs下载速度过慢的时候，是因为服务器在国外的原因，可以用国内的镜像来解决</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="进行搭建"><a href="#进行搭建" class="headerlink" title="进行搭建"></a>进行搭建</h2><ul><li><p>hexo的安装</p><p>在命令行中输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>当然在具有淘宝镜像以后就是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>等待过后便安装完成</p></li><li><p>博客初始化</p><p>首先新创建一个文件夹</p><p>然后在文件夹里进行命令行输入    </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>创建了文档，且初始化完成。</p><p>注意：以后的操作都基于此文件夹，若出现严重bug可以删除此文件夹重新初始化hexo博客框架</p></li><li><p>以下是部分常用命令操作</p><p>本地服务器建立</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>清理缓存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>向网站部署</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p>以上，本地博客便搭建成功</p><hr><h1 id="关于远端部署"><a href="#关于远端部署" class="headerlink" title="关于远端部署"></a>关于远端部署</h1><p>​        本地博客搭建成功了就要部署到远端网站方便其他人查看，我这里用码云（gitee）来做示例，大家也可以使用github，两者用法几乎相同</p><p>​        当然也可以购买服务器不过相对部署在GitHub和Gitee上就比较麻烦一点</p><ul><li><p>首先创建一个仓库</p><p>注意如果是GitHub的话仓库名必须固定：账号名.github.io（例如thanyi.github.io）</p><p>但是在码云没有这个要求</p></li><li><p>在新建的文件夹使用命令安装一个和git相关的插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -<span class="literal">-save</span> hexo<span class="literal">-deployer</span><span class="literal">-git</span></span><br></pre></td></tr></table></figure></li><li><p>文件夹中有名为”_config.yml”的文件，打开文件，在最底部的# Deployment模块输入相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://gitee.com/xxx/xxx.git</span><span class="comment">#这里填你的仓库的http地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>保存</p></li><li><p>部署到远端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就成功部署到远端了</p><p>注意：部署到远端之前需要先生成静态文件，命令在上方</p></li><li><p>在gitee的仓库右方<strong>服务</strong>下方的<strong>Gitee</strong>的下方的page按钮，点击进入部署页面，进行部署。</p><p>gitee会为你提供你的部署网址，这就是你的博客网址了</p></li></ul><hr><h1 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h1><p>主题方面有很多做法，我用的是butterfly主题，它的使用连接如下：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于hexo的博客搭建&quot;&gt;&lt;a href=&quot;#关于hexo的博客搭建&quot; class=&quot;headerlink&quot; title=&quot;关于hexo的博客搭建&quot;&gt;&lt;/a&gt;关于hexo的博客搭建&lt;/h1&gt;&lt;h1 id=&quot;关于前言&quot;&gt;&lt;a href=&quot;#关于前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="hexo" scheme="http://ethanyi9.gitee.io/ethanyi9/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="hexo" scheme="http://ethanyi9.gitee.io/ethanyi9/tags/hexo/"/>
    
  </entry>
  
</feed>

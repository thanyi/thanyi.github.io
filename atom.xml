<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ethanyi&#39;s blog</title>
  
  
  <link href="http://ethanyi9.gitee.io/ethanyi_blog/atom.xml" rel="self"/>
  
  <link href="http://ethanyi9.gitee.io/ethanyi_blog/"/>
  <updated>2021-03-06T01:58:58.000Z</updated>
  <id>http://ethanyi9.gitee.io/ethanyi_blog/</id>
  
  <author>
    <name>ethanyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式的基本使用</title>
    <link href="http://ethanyi9.gitee.io/ethanyi_blog/2021/03/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://ethanyi9.gitee.io/ethanyi_blog/2021/03/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-06T01:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。</p><h2 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h2><p>正则表达式可以把它看做是一种通配符的增强版，它可以帮你匹配你想要的字符串。</p><p>在很多地方可以用到正则表达式，比如编译器中的词法分析器、网址上的注册表单、爬虫中用正则表达式来提取信息等等。所以我们可以更加深刻地理解正则表达式的用处之广，好多地方都不能缺少它。</p><p>以下是正则表达式正式内容，一些最基础的用法。</p><h1 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h1><p>限定符是一类特殊的字符，以下归纳：</p><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>?</td><td>表示之前的字符出现零次或者一次</td><td>end? –&gt; 表示en或者end</td></tr><tr><td>*</td><td>表示之前的字符出现零次或者多次</td><td>end* –&gt; 表示en或者enddddd 都行</td></tr><tr><td>+</td><td>表示之前的字符出现一次或者多次</td><td>end+ –&gt; 表示end或者endddddd</td></tr><tr><td>{…}</td><td>之中可以精确表示字符出现的次数</td><td>en{2}d –&gt; 表示ennd     en{2,3}d –&gt; 表示ennd或者ennnd</td></tr></tbody></table><p>如果想要限定多个运算符，比如ab，就直接打上括号再添加符号就行了，比如(ab)? 就表示 ab 或者空字符串。</p><h1 id="“或”运算符"><a href="#“或”运算符" class="headerlink" title="“或”运算符"></a>“或”运算符</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>|</td><td>两者之间的取或</td><td>a (cat|dog) –&gt; a cat 或者 a dog</td></tr></tbody></table><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>[…]</td><td>匹配 <strong>[…]</strong> 中的所有字符</td><td>[abc] 会匹配所有字符串中的a,b,c 的字符</td></tr><tr><td>[^…]</td><td>表示匹配除了[…]中字符以外的所有字符串</td><td>[^abc]会匹配所有字符串中除了a,b,c 的字符</td></tr></tbody></table><p>注：[a-z]表示所有的小写字符，[A-Z]表示所有大写字符，[a-zA-Z0-9]表示所有的英文字符和数字</p><p>[^0-9]表示所有的非数字字符(包括换行符)</p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符是一组正则表达式中预先定义好的一系列常用字符类型，比如数字、空白符、单词开头、单词结尾等。这些元字符中的大多数以反斜杠\ 开头</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>所有数字字符，等同于[0-9]</td></tr><tr><td>\w</td><td>单词字符，表示所有英文字符、数字和下划线</td></tr><tr><td>\s</td><td>空白符，包含tab字符以及换行符</td></tr><tr><td>\D</td><td>表示所有<strong>非数字字符</strong></td></tr><tr><td>\W</td><td>表示所有<strong>非单词字符</strong></td></tr><tr><td>\S</td><td>表示所有<strong>非空白字符</strong></td></tr><tr><td>.</td><td>表示所有任意的字符(不包括换行符)</td></tr><tr><td>^</td><td>匹配行首，^a 表示匹配所有行首的a</td></tr><tr><td>$</td><td>匹配行尾，a$表示匹配所有行尾的a</td></tr></tbody></table><h1 id="贪婪匹配和懒惰匹配-lazy-match"><a href="#贪婪匹配和懒惰匹配-lazy-match" class="headerlink" title="贪婪匹配和懒惰匹配(lazy match)"></a>贪婪匹配和懒惰匹配(lazy match)</h1><p>之前讲述?+{}之类的限定符的时候，都是默认匹配尽可能多的字符</p><p>比如我想要限定HTML文本中的字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用&lt;.*&gt; 来进行匹配，结果匹配下来的字符串会是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为默认的贪婪匹配(greedy match)会匹配尽可能多的字符串，所以匹配了第一个</p><p>的左边”&lt;”和第二个</p><p>右边的”&gt;” 中间的所有字符串</p><p>解决方法：</p><p>使用&lt;.*?&gt;来讲贪婪匹配(greedy match)变成懒惰匹配(lazy match)</p><p>这样的话，匹配出来的字符串就会变成<P>和<p>两个字符</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846">https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846</a></p></P></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式是什么&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="正则表达式" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="正则表达式" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于git的基本使用</title>
    <link href="http://ethanyi9.gitee.io/ethanyi_blog/2021/02/25/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/"/>
    <id>http://ethanyi9.gitee.io/ethanyi_blog/2021/02/25/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2021-02-25T14:24:47.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>git安装：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h2 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h2><ul><li>下载好Git后，点击右键，打开git bash here</li></ul><ul><li><p>开始绑定用户名和邮箱（注：用户名是你GitHub的用户名，邮箱是你GitHub的绑定邮箱，上传到gitee的话同理）</p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.name &quot;你的用户名&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225171909368.png"></p><h2 id="SSHkey-设置"><a href="#SSHkey-设置" class="headerlink" title="SSHkey 设置"></a>SSHkey 设置</h2><ul><li><p>在git bash中输入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -(路径) -&quot;github绑定邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p>​        注：路径是指C盘或者D盘路径</p><p>​        例如：ssh-keygen -t rsa -C -“<a href="mailto:&#49;&#x33;&#49;&#54;&#x35;&#x39;&#x34;&#x31;&#x31;&#x35;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#49;&#x33;&#49;&#54;&#x35;&#x39;&#x34;&#x31;&#x31;&#x35;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>“</p><p>​    输入后git bash中会有三次提醒输入操作<br>​            1）是路径确认，直接按回车存默认路径即可<br>​            2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦;<br>​            3）确认密码,直接回车键</p><p>​    （也就是说三次回车）</p><p>​    之后电脑C盘路径C:\Users\Administrator（电脑名）.ssh 下会生成 id_rsa.pub 文件，将其中内容复制下来</p><ul><li>在github上找到设置界面，找到其中的”SSH and GPG keys”，点击New SSH key</li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/2.png"></p><ul><li><p>在key输入框中将之前复制的内容输入，title可自定义<img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225173650772.png"></p><p>结束后即SSH keys绑定成功，前期所有准备结束</p></li></ul><h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><h2 id="git本地"><a href="#git本地" class="headerlink" title="git本地"></a>git本地</h2><ul><li><p>首先创建一个文件夹，文件夹中是我们已经写好的代码，之后Git命令操作都基于此文件夹</p><p>在文件夹路径下打开git bush</p><p>输入命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>初始化成功后原文件夹里多了一个隐藏文件夹.git </p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>即可上传 （代表将此文件夹里面的所有文件都保存在暂存区中）</p><p>然后以后的修改使用commit命令进行提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这里是备注内容&quot;</span><br></pre></td></tr></table></figure><p>这是将修改的内容提交到本地仓库</p><p>注：add是将代码提交到我们所谓的“缓存区”，而commit则是将我们在缓存区的代码提交到本地仓库。</p><p>​        git有好几个区，工作区（workspace）、暂存区（index）、本地仓库（local repository）、还有远程仓库（remote repository）</p></li></ul><h2 id="git提交到远程"><a href="#git提交到远程" class="headerlink" title="git提交到远程"></a>git提交到远程</h2><ul><li><p>在github上创建仓库</p></li><li><p>找到创建的仓库的地址(http地址、ssh地址)</p></li><li><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 你复制的地址</span><br></pre></td></tr></table></figure><p>注：创建了一个远程仓库名叫origin，和GitHub上的仓库建立了联系</p></li><li><p>最后，将本地仓库的代码传输到GitHub的仓库上，输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>至此，代码到GitHub转换成功</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="git" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/git/"/>
    
    
    <category term="git" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/git/"/>
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的博客搭建</title>
    <link href="http://ethanyi9.gitee.io/ethanyi_blog/2021/02/24/%E4%BD%A0%E5%A5%BD/"/>
    <id>http://ethanyi9.gitee.io/ethanyi_blog/2021/02/24/%E4%BD%A0%E5%A5%BD/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-24T06:31:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于hexo的博客搭建"><a href="#关于hexo的博客搭建" class="headerlink" title="关于hexo的博客搭建"></a>关于hexo的博客搭建</h1><h1 id="关于前言"><a href="#关于前言" class="headerlink" title="关于前言"></a>关于前言</h1><p>这是我第一次的博客介绍，仅供参考</p><p>这个博客的搭建弄了很多天，因为之前电脑总是经历了千奇百怪的bug，但在朋友的帮助下还是成功（应该算是成功吧）把这个博客搭建了起来。仔细一想好像真的白嫖了好多东西哈哈。</p><hr><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>node.js下载、git安装</p><p>推荐教程：<a href="https://blog.csdn.net/antma/article/details/86104068">https://blog.csdn.net/antma/article/details/86104068</a>   node.js安装</p><p>​                    <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a>    git安装</p><ul><li><p>注1：由于node.js版本过高的话会和hexo版本发生冲突导致报错，推荐node版本不超过12.x版本，可以使用nvm进行版本控制，</p><p>nvm的教程：<a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a> </p><p>当然也可以寻找其他版本的教程</p></li><li><p>注2：nodejs下载速度过慢的时候，是因为服务器在国外的原因，可以用国内的镜像来解决</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="进行搭建"><a href="#进行搭建" class="headerlink" title="进行搭建"></a>进行搭建</h2><ul><li><p>hexo的安装</p><p>在命令行中输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>当然在具有淘宝镜像以后就是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>等待过后便安装完成</p></li><li><p>博客初始化</p><p>首先新创建一个文件夹</p><p>然后在文件夹里进行命令行输入    </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>创建了文档，且初始化完成。</p><p>注意：以后的操作都基于此文件夹，若出现严重bug可以删除此文件夹重新初始化hexo博客框架</p></li><li><p>以下是部分常用命令操作</p><p>本地服务器建立</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>清理缓存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>向网站部署</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p>以上，本地博客便搭建成功</p><hr><h1 id="关于远端部署"><a href="#关于远端部署" class="headerlink" title="关于远端部署"></a>关于远端部署</h1><p>​        本地博客搭建成功了就要部署到远端网站方便其他人查看，我这里用码云（gitee）来做示例，大家也可以使用github，两者用法几乎相同</p><p>​        当然也可以购买服务器不过相对部署在GitHub和Gitee上就比较麻烦一点</p><ul><li><p>首先创建一个仓库</p><p>注意如果是GitHub的话仓库名必须固定：账号名.github.io（例如thanyi.github.io）</p><p>但是在码云没有这个要求</p></li><li><p>在新建的文件夹使用命令安装一个和git相关的插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -<span class="literal">-save</span> hexo<span class="literal">-deployer</span><span class="literal">-git</span></span><br></pre></td></tr></table></figure></li><li><p>文件夹中有名为”_config.yml”的文件，打开文件，在最底部的# Deployment模块输入相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://gitee.com/xxx/xxx.git</span><span class="comment">#这里填你的仓库的http地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>保存</p></li><li><p>部署到远端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就成功部署到远端了</p><p>注意：部署到远端之前需要先生成静态文件，命令在上方</p></li><li><p>在gitee的仓库右方<strong>服务</strong>下方的<strong>Gitee</strong>的下方的page按钮，点击进入部署页面，进行部署。</p><p>gitee会为你提供你的部署网址，这就是你的博客网址了</p></li></ul><hr><h1 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h1><p>主题方面有很多做法，我用的是butterfly主题，它的使用连接如下：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于hexo的博客搭建&quot;&gt;&lt;a href=&quot;#关于hexo的博客搭建&quot; class=&quot;headerlink&quot; title=&quot;关于hexo的博客搭建&quot;&gt;&lt;/a&gt;关于hexo的博客搭建&lt;/h1&gt;&lt;h1 id=&quot;关于前言&quot;&gt;&lt;a href=&quot;#关于前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="教程" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="hexo" scheme="http://ethanyi9.gitee.io/ethanyi_blog/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
    <category term="技术" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="hexo" scheme="http://ethanyi9.gitee.io/ethanyi_blog/tags/hexo/"/>
    
  </entry>
  
</feed>

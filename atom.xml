<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ethanyi&#39;s Blog</title>
  
  
  <link href="https://thanyi.github.io/atom.xml" rel="self"/>
  
  <link href="https://thanyi.github.io/"/>
  <updated>2022-03-24T02:19:39.359Z</updated>
  <id>https://thanyi.github.io/</id>
  
  <author>
    <name>ethanyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nisp 一级证书笔记</title>
    <link href="https://thanyi.github.io/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/"/>
    <id>https://thanyi.github.io/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/</id>
    <published>2022-03-21T07:09:32.000Z</published>
    <updated>2022-03-24T02:19:39.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、信息安全"><a href="#一、信息安全" class="headerlink" title="一、信息安全"></a>一、信息安全</h1><h2 id="基本目标"><a href="#基本目标" class="headerlink" title="基本目标"></a>基本目标</h2><h4 id="基本属性（CIA）"><a href="#基本属性（CIA）" class="headerlink" title="基本属性（CIA）"></a>基本属性（CIA）</h4><p>机密性、完整性、可用性</p><h4 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h4><p>真实性、可问责性、不可否认性、可靠性</p><h2 id="病毒和木马"><a href="#病毒和木马" class="headerlink" title="病毒和木马"></a>病毒和木马</h2><p>区别</p><ul><li>病毒和木马不容易区分清楚；</li><li>病毒和木马一般可以统称为恶意程序或恶意软件；</li><li>病毒具有一定的显性破坏性，木马更倾向于默默地窃取；</li><li>病毒具有自传播性，即能够自我复制，而木马则不具备这一点</li></ul><h4 id="冲击波蠕虫利用的是"><a href="#冲击波蠕虫利用的是" class="headerlink" title="冲击波蠕虫利用的是"></a>冲击波蠕虫利用的是</h4><p>DCOM RPC缓冲区漏洞</p><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><h4 id="风险评估的方法"><a href="#风险评估的方法" class="headerlink" title="风险评估的方法"></a>风险评估的方法</h4><p>定量的风险评估方法、定性的风险评估方法、定性与定量相结合的评估方法</p><h1 id="二、TCP-IP协议簇"><a href="#二、TCP-IP协议簇" class="headerlink" title="二、TCP/IP协议簇"></a>二、TCP/IP协议簇</h1><p>OSI7层模型和TCP/IP五层模型</p><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220320213818598-16478781450921.png" class title="image-20220320213818598"><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220320214010539-16478781450922.png" class title="image-20220320214010539"><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220320214140232-16478781450923.png" class title="image-20220320214140232"><h3 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h3><h4 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h4><p>处于物理层</p><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><p>物理层和数据链路层</p><h3 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h3><ul><li>传输层叫做段(segment)</li><li>在网络层叫做数据报 (datagram)</li><li>在链路层叫做帧(frame)</li><li>物理层叫做bit</li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="BGP协议"><a href="#BGP协议" class="headerlink" title="BGP协议"></a>BGP协议</h3><p>Border Gateway Protocol 是一个应用层协议，运行在TCP协议之上，端口号179</p><ul><li>BGP协议是用于自治系统AS之间的动态路由协议</li><li>是一种外部网关协议，与OSPF、RIP等内部网关协议不同，其着眼点不在于发现和计算路由，而是着眼于在AS之间控制路由的转播和选择最佳路由</li></ul><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220320215000304-16478781450924.png" class title="image-20220320215000304"><h3 id="pop3和imap协议："><a href="#pop3和imap协议：" class="headerlink" title="pop3和imap协议："></a>pop3和imap协议：</h3><ol><li><p>POP服务器侦听端口110，而带SSL安全（POP3DS）服务器的POP在端口995上侦听；</p><p>IMAP服务器侦听端口143，带有SSL安全（IMAPDS）服务器的IMAP侦听端口993。</p></li><li><p>POP3将邮件从服务器下载到单台计算机，然后将其从服务器删除。</p><p>而 IMAP 则可以通过在邮件客户端和邮箱服务器之间进行双向同步的功能来避免这种情况</p></li></ol><h3 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h3><ul><li><p>FTP是仅基于TCP的服务，不支持UDP</p></li><li><p>与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）</p><p>通常来说这两个端口是21（命令端口）和20（数据端口）</p></li><li><p>FTP具有两种模式，分别是port模式(主动模式)和pasv模式(被动模式)</p></li><li><p>FTP的传输有 ASCII 传输模式、二进制数据传输模式</p></li></ul><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><p>当访问Web网站的某个页面资源不存在时，HTTP服务器发回的响应状态代码  404</p><h4 id="HTTP服务器响应的状态码"><a href="#HTTP服务器响应的状态码" class="headerlink" title="HTTP服务器响应的状态码"></a>HTTP服务器响应的状态码</h4><ul><li><p>1XX：临时的响应。客户端在收到常规响应之前，应准备接收一个或多个1XX响应</p></li><li><p>2XX：服务器成功的接收了客户端请求</p></li><li><p>3XX：客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同页面，或者通过代理服务器重复该请求</p></li><li><p>4XX：发生错误，客户端似乎有问题。例如：客户端请求不存在的页面，客户端未提供有效的身份验证信息</p></li><li><p>5XX：服务器遇到错误而不能完成该请求</p></li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><ul><li>ICMP封装在IP数据报的数据部分</li><li>ICMP消息的传输是不可靠的</li><li>ICMP是IP协议的必需的一个部分</li><li>ICMP可用来进行拥塞控制</li></ul><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP和IPsec都是工作在网络层</p><h4 id="关于IPv4地址"><a href="#关于IPv4地址" class="headerlink" title="关于IPv4地址"></a>关于IPv4地址</h4><ul><li>IP地址的总长度为32位</li><li>每一个IP地址都由网络地址和主机地址组成</li><li>一个C类地址拥有8位主机地址，可给254台主机分配地址</li></ul><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220309183802930-16478781450925.png" class title="image-20220309183802930"><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220309184416729-16478781450926.png" class title="image-20220309184416729"><h4 id="关于ipv6地址"><a href="#关于ipv6地址" class="headerlink" title="关于ipv6地址"></a>关于ipv6地址</h4><p>IPV4的32位地址共40多亿个，IPV6的128位地址是IPV4地址总数的2^96^倍</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>WLAN和局域网是在网络层之下进行了区别，但是在网络层之上是一样的</p><h3 id="PPP-协议"><a href="#PPP-协议" class="headerlink" title="PPP 协议"></a>PPP 协议</h3><p>PPP（点到点协议）是为在同等单元之间传输数据包这样的简单链路设计的一个协议</p><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>Address Resolution Protocol  (地址解析协议)</p><p>ARP协议是在数据链路层进行确定MAC地址确定的协议，作用是可以进行IP地址和Mac地址的对应，这样就可以进行数据包的发送了。</p><ol><li>通过广播的方式对其他主机，寻求ip为xxxx的主机的Mac地址</li><li>每一个接收到广播的数据包的主机进行ip地址对应，然后发送回包。</li></ol><p>重点：</p><ul><li>ARP表用于建立IP地址到MAC地址的映射</li><li>受到了ARP欺骗的计算机发出的数据包目的MAC地址是错误的</li><li>需要对IP地址和物理地址进行缓存</li></ul><h1 id="三、密码学"><a href="#三、密码学" class="headerlink" title="三、密码学"></a>三、密码学</h1><h2 id="密码学的安全目标的三个方面："><a href="#密码学的安全目标的三个方面：" class="headerlink" title="密码学的安全目标的三个方面："></a>密码学的安全目标的三个方面：</h2><p>保密性、完整性、可用性</p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h4 id="代换密码（substitution-cipher"><a href="#代换密码（substitution-cipher" class="headerlink" title="代换密码（substitution cipher)"></a>代换密码（substitution cipher)</h4><p>就是明文中的每一个字符被替换成密文中的另一个字符。接收者对密文做反向替换就可以恢复出明文。  </p><h4 id="置换密码-permutation-cipher"><a href="#置换密码-permutation-cipher" class="headerlink" title="置换密码 ( permutation cipher)"></a>置换密码 ( permutation cipher)</h4><p>又称换位密码（transposition cipher)：明文的字母保持相同，但顺序被打乱了。</p><h2 id="序列密码算法"><a href="#序列密码算法" class="headerlink" title="序列密码算法"></a>序列密码算法</h2><p>RC4、A5/1、SEAL等；</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>wifi的加密方式有<strong>WEP</strong>，<strong>CCMP</strong>，<strong>AES</strong>和<strong>TKIP</strong></p><p>WEP加密是共享秘钥式，使用了<strong>RC4</strong>进行加密算法，规定的密钥长度是<strong>64bit</strong></p><h4 id="关于序列密码"><a href="#关于序列密码" class="headerlink" title="关于序列密码"></a>关于序列密码</h4><ul><li><p>序列密码是单独地加密每个明文位；</p></li><li><p>由于序列密码小而快，所以它们非常合适计算资源有限的应用；</p></li><li><p>序列密码的加密和解密使用相同的函数；</p></li></ul><h2 id="分组密码算法"><a href="#分组密码算法" class="headerlink" title="分组密码算法"></a>分组密码算法</h2><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><ul><li>DES 是一种分组密码</li><li>DES 是对合运算,因而加密和解密共同一算法</li><li>DES 综合运用了置换、代替、代数等多种密码技术</li><li>DES ==不是==面向十六进制的密码算法</li></ul><h4 id="DES的缺点"><a href="#DES的缺点" class="headerlink" title="DES的缺点"></a>DES的缺点</h4><ul><li>密钥较短</li><li>存在弱密钥</li><li>存在半弱密钥</li></ul><h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><h2 id="公开密码机制（非对称加密机制）"><a href="#公开密码机制（非对称加密机制）" class="headerlink" title="公开密码机制（非对称加密机制）"></a>公开密码机制（非对称加密机制）</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><ul><li>RSA 算法具有加解密算法的可逆性,加密和解密运算可交换</li><li>RSA 密码的核心运算是模幂运算</li><li>RSA 算法可同时确保数据的秘密性和数据的真实性</li></ul><h2 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h2><ul><li>安全散列算法是 FIPS 所认证的安全杂凑算法</li><li>安全哈希算法主要适用于数字签名标准里面定义的数字签名算法</li><li>哈希算法输出的字符串一般称为 Hash 值</li></ul><h2 id="密码应用"><a href="#密码应用" class="headerlink" title="密码应用"></a>密码应用</h2><h3 id="CFS"><a href="#CFS" class="headerlink" title="CFS"></a>CFS</h3><p>CFS是一个经典的加密文件系统</p><ul><li>CFS使用DES来加密文件</li><li>CFS客户基于网络文件系统协议运行一个服务器保护程序</li><li>CFS的加密操作在用户层完成</li><li>CFS的效率<strong>不</strong>高</li></ul><h3 id="TCFS"><a href="#TCFS" class="headerlink" title="TCFS"></a>TCFS</h3><p>TCFS是一个受CFS启发的Linux软件包</p><ul><li><p>TCFS具有更大的透明度，用户甚至不需要知道他们的文件被加密了</p></li><li><p>TCFS对数据进行加密时，对每个文件使用不同的“文件密钥”进行加密</p><p>对一个文件的不同部分使用的是不同的“块密钥”进行加密</p></li><li><p>TCFS的数据加密、解密操作在核心层完成</p></li><li><p>TCFS对文件名、文件大小、访问时间、目录结构等一些敏感信息==没有==很好的保护</p></li></ul><h1 id="四、安全技术"><a href="#四、安全技术" class="headerlink" title="四、安全技术"></a>四、安全技术</h1><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>防火墙阻挡对网络的非法访问和不安全数据的传递</p></li><li><p>防火墙的安全规则由匹配条件与处理方式两个部分共同构成</p></li><li><p>防火墙使得本地系统和网络免于受到许多网络安全威胁</p></li><li><p>防火墙==不是==一种动态安全技术</p></li></ul><h3 id="经典体系结构"><a href="#经典体系结构" class="headerlink" title="经典体系结构"></a>经典体系结构</h3><ul><li>双重宿主主机体系结构 </li><li>被屏蔽主机体系结构 </li><li>被屏蔽子网体系结构</li></ul><p>下一代防火墙</p><p>不基于互联网及用户自身的动态策略配置</p><h3 id="处置响应的配置接口"><a href="#处置响应的配置接口" class="headerlink" title="处置响应的配置接口"></a>处置响应的配置接口</h3><ul><li>处置IOC</li><li>处置受害IP</li><li>事件告警</li></ul><h3 id="显著的缺点"><a href="#显著的缺点" class="headerlink" title="显著的缺点"></a>显著的缺点</h3><p>就是防火墙对于应用层没有控制,方便了木马的进入    </p><h2 id="网络蜜罐技术"><a href="#网络蜜罐技术" class="headerlink" title="网络蜜罐技术"></a>网络蜜罐技术</h2><h3 id="最主要的功能"><a href="#最主要的功能" class="headerlink" title="最主要的功能"></a>最主要的功能</h3><ul><li>对系统中所有的操作</li><li>行为进行监视和记录</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>产品型和研究型</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>在受防火墙保护的网络中,蜜罐通常放置在防火墙的外部或放置在防护程度较低的服务网络中</p><h2 id="容灾系统"><a href="#容灾系统" class="headerlink" title="容灾系统"></a>容灾系统</h2><p>衡量容灾系统有两个主要指标：</p><p>RPO（Recovery Point Objective）和 RTO（Recovery Time Object）</p><p>其中 RPO代表 了当灾难发生时允许丢失的数据量，而 RTO 则代表了系统恢复的时间。 <strong>RPO 与 RTO 越小，系统的可用性就越高</strong>，当然用户需要的投资也越大。</p><h4 id="容灾技术范畴"><a href="#容灾技术范畴" class="headerlink" title="容灾技术范畴"></a>容灾技术范畴</h4><p>数据容灾、系统容灾、应用容灾</p><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><h4 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h4><p>完全备份是指将系统中所有选择的数据对象进行一次全面的备份，不论数据对象自上次备份之后是否修改过</p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>增量备份是指只对上次备份后系统中变化过的数据对象的备份</p><h4 id="差分备份"><a href="#差分备份" class="headerlink" title="差分备份"></a>差分备份</h4><p>差异备份是指在==<strong>一次全备份</strong>==后到进行差异备份的这段时间内，对那些增加或者修改文件的备份</p><h4 id="渐进式备份"><a href="#渐进式备份" class="headerlink" title="渐进式备份"></a>渐进式备份</h4><p>系统排除完全备份，数据对象只有当发生改变时才被写入到存储介质上</p><h2 id="入侵防御系统（IPS"><a href="#入侵防御系统（IPS" class="headerlink" title="入侵防御系统（IPS)"></a>入侵防御系统（IPS)</h2><p>入侵防御系统（IPS）不但能精确地检测到攻击行为，而且能通过一定的响应方式实时地终止入侵行为的发生</p><h3 id="Web应用防护系统（WAF）"><a href="#Web应用防护系统（WAF）" class="headerlink" title="Web应用防护系统（WAF）"></a>Web应用防护系统（WAF）</h3><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220321101338773.png" class title="image-20220321101338773"><p>网站应用级入侵防御系统  （Web Application Firewall），简称： WAF</p><p>Web应用防火墙可以防止Web应用免受各种常见攻击，比如SQL注入，跨站脚本漏洞（XSS）等。</p><h4 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h4><ul><li><strong>透明代理模式</strong></li><li><strong>反向代理模式</strong></li><li><strong>路由代理模式</strong></li></ul><h2 id="入侵检测系统（IDS）"><a href="#入侵检测系统（IDS）" class="headerlink" title="入侵检测系统（IDS）"></a>入侵检测系统（IDS）</h2><p>依照一定的安全策略，对网络、系统的运行状况进行监视，其全称为</p><p>Intrusion Detection Systems</p><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="数据源分类"><a href="#数据源分类" class="headerlink" title="数据源分类"></a>数据源分类</h3><ul><li><p>基于主机的入侵检测系统（HIDS）</p></li><li><p>基于网络的入侵检测系统（NIDS）</p></li></ul><h3 id="检测原理分类"><a href="#检测原理分类" class="headerlink" title="检测原理分类"></a>检测原理分类</h3><ul><li><h4 id="异常入侵检测"><a href="#异常入侵检测" class="headerlink" title="异常入侵检测"></a>异常入侵检测</h4></li><li><h4 id="特征入侵检测"><a href="#特征入侵检测" class="headerlink" title="特征入侵检测"></a>特征入侵检测</h4></li></ul><h2 id="入侵检测技术"><a href="#入侵检测技术" class="headerlink" title="入侵检测技术"></a>入侵检测技术</h2><h4 id="误用检测技术（特征检测技术）"><a href="#误用检测技术（特征检测技术）" class="headerlink" title="误用检测技术（特征检测技术）"></a><strong>误用检测技术（特征检测技术）</strong></h4><p>收集非正常操作的行为特征，建立相关的特征库，当监测的用户或系统行为与库中的记录相匹配时，系统就认为这种行为是入侵。</p><p>总结：收集的是攻击特征</p><h4 id="异常检测技术"><a href="#异常检测技术" class="headerlink" title="异常检测技术"></a><strong>异常检测技术</strong></h4><p>首先总结正常操作应该具有的特征（用户轮廓），试图用定量的方式加以描述，当用户活动与正常行为有重大偏离时即被认为是入侵。</p><p>总结：收集的是正常特征</p><h1 id="五、网络空间安全保障和安全运维"><a href="#五、网络空间安全保障和安全运维" class="headerlink" title="五、网络空间安全保障和安全运维"></a>五、网络空间安全保障和安全运维</h1><h2 id="系统安全模型"><a href="#系统安全模型" class="headerlink" title="系统安全模型"></a>系统安全模型</h2><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220310094306342-16478781450927.png" class title="image-20220310094306342"><h4 id="四种强制访问控制策略规定："><a href="#四种强制访问控制策略规定：" class="headerlink" title="四种强制访问控制策略规定："></a><strong>四种强制访问控制策略规定</strong>：</h4><p>下读、上写、上读、下写</p><p>其中上读：</p><p>是指客体在主体之上时可以进行读取</p><h4 id="Lattice模型"><a href="#Lattice模型" class="headerlink" title="Lattice模型"></a>Lattice模型</h4><p>下读、下写</p><p>只有主体安全级别大于客体才能读写</p><h4 id="Bell－LaPadula-BLP-模型"><a href="#Bell－LaPadula-BLP-模型" class="headerlink" title="Bell－LaPadula(BLP)模型"></a>Bell－LaPadula(BLP)模型</h4><p>下读、上写</p><p>保证机密性</p><h4 id="Biba模型"><a href="#Biba模型" class="headerlink" title="Biba模型"></a>Biba模型</h4><p>上读、下写</p><p>保证完整性</p><h2 id="威胁"><a href="#威胁" class="headerlink" title="威胁"></a>威胁</h2><h4 id="安全威胁情报基本特征"><a href="#安全威胁情报基本特征" class="headerlink" title="安全威胁情报基本特征"></a>安全威胁情报基本特征</h4><ul><li>时效性</li><li>相关性</li><li>准确性</li></ul><h2 id="信息技术安全性评估通用标准"><a href="#信息技术安全性评估通用标准" class="headerlink" title="信息技术安全性评估通用标准"></a>信息技术安全性评估通用标准</h2><p>也称为CC 标准</p><h2 id="网络安全态势"><a href="#网络安全态势" class="headerlink" title="网络安全态势"></a>网络安全态势</h2><h4 id="网络安全态势感知三个层次"><a href="#网络安全态势感知三个层次" class="headerlink" title="网络安全态势感知三个层次"></a>网络安全态势感知三个层次</h4><p>感知、理解、预测</p><h4 id="网络安全态势的预测方法"><a href="#网络安全态势的预测方法" class="headerlink" title="网络安全态势的预测方法"></a>网络安全态势的预测方法</h4><p>神经网络是目前最常用的网络态势预测方法</p><h2 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h2><h4 id="PDCA-循环的含义是将质量管理分为四个阶段"><a href="#PDCA-循环的含义是将质量管理分为四个阶段" class="headerlink" title="PDCA 循环的含义是将质量管理分为四个阶段"></a>PDCA 循环的含义是将<strong>质量管理</strong>分为四个阶段</h4><p>计划（plan）、执行（do）、检查 （check）、处理（Act）</p><h2 id="信息系统安全运营"><a href="#信息系统安全运营" class="headerlink" title="信息系统安全运营"></a>信息系统安全运营</h2><h4 id="PDRR-安全模型"><a href="#PDRR-安全模型" class="headerlink" title="PDRR 安全模型"></a>PDRR 安全模型</h4><ul><li><p>PDRR 模型包括防护（Protection）、 检测（Detection）、响应（Reaction）和恢复（Recovery）四个部分</p></li><li><p>PDRR 是一个动态的信息系统安全运营模型</p></li><li><p>PDRR 模型中，检测部分的功能就是检测入侵者的身份</p></li><li><p>除PDRR模型之外，还有==WPDRRC 模型==、==PPDR 模型==等都是信息系统安全运营模型</p></li></ul><h2 id="信息安全防护框架"><a href="#信息安全防护框架" class="headerlink" title="信息安全防护框架"></a>信息安全防护框架</h2><ul><li>网络层安全管控：最下方；网络安全域控制，网络准入控制，网络流量分析及监测</li><li>虚拟层安全管控</li><li>系统层安全管控</li><li>应用层安全管控</li><li>数据层安全管控</li><li>用户层安全管控：最上方</li></ul><h2 id="信息系统安全防护体系建设"><a href="#信息系统安全防护体系建设" class="headerlink" title="信息系统安全防护体系建设"></a>信息系统安全防护体系建设</h2><ul><li>确定安全域是企业信息系统安全防护体系建设的首要任务</li><li>划分安全域可以设立清晰的防护边界对系统进行保护</li><li>划分安全域前需要确定企业信息系统安全防护体系的防护范围</li><li>==可以==将相同安全防护需求的对象划分到同一个安全域</li></ul><h2 id="安全策略设计原则"><a href="#安全策略设计原则" class="headerlink" title="安全策略设计原则"></a>安全策略设计原则</h2><ul><li>先急后缓</li><li>先众后寡</li><li>先端后网</li></ul><h2 id="数据融合层次"><a href="#数据融合层次" class="headerlink" title="数据融合层次"></a>数据融合层次</h2><ul><li>原始数据融合</li><li>特征级融合</li><li>决策级融合</li></ul><h2 id="网络取证-network-forensics"><a href="#网络取证-network-forensics" class="headerlink" title="网络取证(network forensics)"></a>网络取证(network forensics)</h2><p>抓取、记录和分析网络事件以发现安全攻击或其他的问题事件的来源</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>动态、实时、多态</p><h4 id="分类方式"><a href="#分类方式" class="headerlink" title="分类方式"></a>分类方式</h4><ul><li>按照采集方式进行分类</li><li>按照取证时延性进行分类</li><li>按照不同的视角进行分类</li></ul><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>客观性</li><li>关联性</li><li>合法性</li></ul><h1 id="不同语言的代码规范"><a href="#不同语言的代码规范" class="headerlink" title="不同语言的代码规范"></a>不同语言的代码规范</h1><h4 id="PHP-安全编码规范"><a href="#PHP-安全编码规范" class="headerlink" title="PHP 安全编码规范"></a>PHP 安全编码规范</h4><ul><li>在 PHP 中，可以直接使用“0/1”代替“true/false”</li><li>在 PHP 项目中，“/scripts”路径下默认存放图片文件</li><li>在 PHP 项目中，可以将独立的功能模块写成函数</li></ul><h4 id="python规范"><a href="#python规范" class="headerlink" title="python规范"></a>python规范</h4><p>默认编码格式：utf-8</p><h1 id="软件安全"><a href="#软件安全" class="headerlink" title="软件安全"></a>软件安全</h1><h2 id="安全设计原则"><a href="#安全设计原则" class="headerlink" title="安全设计原则"></a>安全设计原则</h2><ul><li>最小特权原则</li><li>简单原则</li><li>纵深防御原则</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><ul><li>行为型模式</li><li>结构型模式：组合模式、桥接模式、代理模式</li><li>创建型模式</li></ul><h2 id="软件安全性测试"><a href="#软件安全性测试" class="headerlink" title="软件安全性测试"></a>软件安全性测试</h2><ul><li><p>狭义的软件安全测试是执行安全测试用例的过程；</p></li><li><p>广义的软件安全测试是所有关于安全性测试的活动</p></li></ul><h4 id="终端软件加固包含哪种方式？"><a href="#终端软件加固包含哪种方式？" class="headerlink" title="终端软件加固包含哪种方式？"></a>终端软件加固包含哪种方式？</h4><p>终端软件加壳、代码混淆、反动态调试</p><h4 id="软件静态分析技术"><a href="#软件静态分析技术" class="headerlink" title="软件静态分析技术"></a>软件静态分析技术</h4><p>污点分析、数据流分析、语义分析</p><h4 id="软件动态分析技术"><a href="#软件动态分析技术" class="headerlink" title="软件动态分析技术"></a>软件动态分析技术</h4><p>符号执行、Fuzz 分析、沙箱技术</p><h2 id="网络安全事件的分类分级标准"><a href="#网络安全事件的分类分级标准" class="headerlink" title="网络安全事件的分类分级标准"></a>网络安全事件的分类分级标准</h2><p>1为最大、4为最小</p><h1 id="六、单词全称"><a href="#六、单词全称" class="headerlink" title="六、单词全称"></a>六、单词全称</h1><h3 id="DDos"><a href="#DDos" class="headerlink" title="DDos"></a>DDos</h3><p>Distributed Denial of Service</p><h4 id="PPP-协议-1"><a href="#PPP-协议-1" class="headerlink" title="PPP 协议"></a>PPP 协议</h4><p>提供了中在点到点链路上封装网络层协议信息的标准方法，其英文是</p><p>The Point-to-Point Protocol</p><h4 id="消息认证码MAC"><a href="#消息认证码MAC" class="headerlink" title="消息认证码MAC"></a>消息认证码MAC</h4><p>消息内容和秘密钥的公开函数，其英文全称是</p><p>Message Authentication Code</p><h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p>Virtual Private Network</p><h4 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h4><p>TCP/IP协议簇的一个应用层协议</p><p>Simple Network Management Protocol</p><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>专为远程登录会话和其他网络服务提供安全性的协议</p><p>Secure Shell</p><h4 id="SDU"><a href="#SDU" class="headerlink" title="SDU"></a>SDU</h4><p>Service Data Unit   相邻层间交换的数据单元称之为服务数据单元</p><h4 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h4><p>Lightweight Directory Access Protocol    <strong>轻量目录访问协议</strong></p><p>AD（微软的 Active Directory） 是基于 LDAP 协议的一套解决方案（LDAP 服务器 + 应用），解决了细粒度的权限控制。核心：<strong>「谁 以什么权限 访问什么」</strong>。</p><h4 id="关于远程服务器漏洞和本地漏洞"><a href="#关于远程服务器漏洞和本地漏洞" class="headerlink" title="关于远程服务器漏洞和本地漏洞"></a>关于远程服务器漏洞和本地漏洞</h4><ul><li>本地漏洞指的是必须登录到安装软件的计算机上才能利用的漏洞</li></ul><h4 id="网络监听"><a href="#网络监听" class="headerlink" title="网络监听"></a>网络监听</h4><p>网络监听是一种监视网络状态、数据流程以及网络上信息传输的管理工具，它可以将网络界面设定成监听模式，并且可以截获网络上所传输的信息</p><ul><li>通过向网络监听组件发送含有异常数据的包，有可能触发缓冲区溢出</li><li>绕过网络监听组件身份验证，可能可以获得合法数据库账号和密码</li><li>网络监听组件被触发缓冲区重写，可能导致数据库服务器无法响应客户端</li></ul><h4 id="路由器在两个网段之间转发数据包时，读取其中的-目标IP-地址来确定下一跳的转发路径"><a href="#路由器在两个网段之间转发数据包时，读取其中的-目标IP-地址来确定下一跳的转发路径" class="headerlink" title="路由器在两个网段之间转发数据包时，读取其中的==目标IP==地址来确定下一跳的转发路径"></a>路由器在两个网段之间转发数据包时，读取其中的==目标IP==地址来确定下一跳的转发路径</h4><h3 id><a href="#" class="headerlink" title></a></h3><h4 id="数据报操作特点"><a href="#数据报操作特点" class="headerlink" title="数据报操作特点"></a>数据报操作特点</h4><ul><li>每个分组自身携带有足够的信息，它的传送是被单独处理的</li><li>在整个传送过程中，不需建立虚电路</li><li>网络节点要为每个分组做出路由选择</li></ul><h1 id="七、计算机相关"><a href="#七、计算机相关" class="headerlink" title="七、计算机相关"></a>七、计算机相关</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h4 id="操作系统的管理功能"><a href="#操作系统的管理功能" class="headerlink" title="操作系统的管理功能"></a>操作系统的管理功能</h4><p>包括</p><ul><li>作业管理</li><li>文件管理</li><li>进程与处理机管理</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h4 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h4><p>关系模型的数据操纵主要包括查询、插入、删除和更新数据，这些操作必须满足关系的完整性约束条件</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义完整性</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h4 id="UNIX-Linux-系统日志子系统"><a href="#UNIX-Linux-系统日志子系统" class="headerlink" title="UNIX/Linux 系统日志子系统"></a>UNIX/Linux 系统日志子系统</h4><ul><li>登录时间日志子系统</li><li>进程统计日志子系统</li><li>错误日志子系统</li><li>==没有==漏洞扫描日志子系统</li></ul><h4 id="Windows-系统日志文件"><a href="#Windows-系统日志文件" class="headerlink" title="Windows 系统日志文件"></a>Windows 系统日志文件</h4><ul><li>系统日志</li><li>应用程序日志</li><li>安全日志</li></ul><h4 id="Syslog"><a href="#Syslog" class="headerlink" title="Syslog"></a>Syslog</h4><ul><li>它是一种工业标准的协议</li><li>它分为客户端和服务器端</li><li>它是一个在 IP 网络中转发系统日志信息的标准</li></ul><h2 id="网络服务"><a href="#网络服务" class="headerlink" title="网络服务"></a>网络服务</h2><p>QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力。</p><h4 id="网络抖动"><a href="#网络抖动" class="headerlink" title="网络抖动"></a>网络抖动</h4><p>网上说法是指网络中的延迟是指信息从发送到接收经过的延迟时间，一般由传输延迟及处理延迟组成；<br>而抖动是指最大延迟与最小延迟的时间差，如最大延迟是20毫秒，最小延迟为5毫秒，那么网络抖动就是15毫秒，<br>它主要标识一个网络的稳定性。</p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>网络中的时延是由节点<strong>处理时延</strong>、<strong>排队时延</strong>、<strong>传输时延</strong>、<strong>传播时延</strong>几个不同部分组成的。</p><img src="/2022/03/21/019nisp%E8%AF%81%E4%B9%A6%E4%B8%80%E7%BA%A7/image-20220310083133504-16478781450928.png" class title="image-20220310083133504"><h4 id="系统的可维护性是指系统维护的难易程度，可以使用-平均维修时间-进行评价"><a href="#系统的可维护性是指系统维护的难易程度，可以使用-平均维修时间-进行评价" class="headerlink" title="系统的可维护性是指系统维护的难易程度，可以使用==平均维修时间==进行评价"></a>系统的可维护性是指系统维护的难易程度，可以使用==平均维修时间==进行评价</h4><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>目的是分析算法的效率以求改进</p><h4 id="S-MIME在RSA数据安全性的基础上加强了互联网E-Mail格式标准MIME的安全性"><a href="#S-MIME在RSA数据安全性的基础上加强了互联网E-Mail格式标准MIME的安全性" class="headerlink" title="S/MIME在RSA数据安全性的基础上加强了互联网E-Mail格式标准MIME的安全性"></a>S/MIME在RSA数据安全性的基础上加强了互联网E-Mail格式标准MIME的安全性</h4><ul><li>封装数据</li><li>透明签名数据</li><li>签名并封装数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、信息安全&quot;&gt;&lt;a href=&quot;#一、信息安全&quot; class=&quot;headerlink&quot; title=&quot;一、信息安全&quot;&gt;&lt;/a&gt;一、信息安全&lt;/h1&gt;&lt;h2 id=&quot;基本目标&quot;&gt;&lt;a href=&quot;#基本目标&quot; class=&quot;headerlink&quot; title=&quot;基</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="学习笔记" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习" scheme="https://thanyi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言socket相关函数</title>
    <link href="https://thanyi.github.io/2021/10/10/018C%E8%AF%AD%E8%A8%80socket%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>https://thanyi.github.io/2021/10/10/018C%E8%AF%AD%E8%A8%80socket%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-10T07:09:32.000Z</published>
    <updated>2022-03-21T16:15:25.656Z</updated>
    
    <content type="html"><![CDATA[<p>网络编程中的一些函数的具体用法</p><h1 id="socket创建过程的一些函数"><a href="#socket创建过程的一些函数" class="headerlink" title="socket创建过程的一些函数"></a>socket创建过程的一些函数</h1><h2 id="套接字创建函数"><a href="#套接字创建函数" class="headerlink" title="套接字创建函数"></a>套接字创建函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>; <span class="comment">//函数原型</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="number">-1</span>==(listend=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)))</span><br><span class="line"> &#123;</span><br><span class="line"> perror(<span class="string">&quot;create listen socket error\n&quot;</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>创建套接字，成功时返回文件描述符，失败时返回-1</p><h2 id="绑定函数"><a href="#绑定函数" class="headerlink" title="绑定函数"></a>绑定函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *myaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>; <span class="comment">//函数原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span>==bind(listend,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(struct sockaddr))) <span class="comment">//server是事先定义好了的</span></span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="comment">//例子</span></span><br></pre></td></tr></table></figure><p>调用bind函数给套接字分配IP地址和端口，成功时返回0，失败时返回-1</p><p>也就是说这个是自己给自己的绑定</p><h2 id="监听函数"><a href="#监听函数" class="headerlink" title="监听函数"></a>监听函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="number">-1</span>==listen(listend,<span class="number">5</span>))  <span class="comment">//listend是一个套接字</span></span><br><span class="line"> &#123;</span><br><span class="line">perror(<span class="string">&quot;listen error\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>将套接字转化为可接收连接的状态，成功时返回0，失败时返回-1</p><h2 id="接收函数"><a href="#接收函数" class="headerlink" title="接收函数"></a>接收函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span>==(connectd=accept(listend,(struct sockaddr*)&amp;client,&amp;len)))</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;create connect socket error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ol><li><p>调用socket函数创建套接字</p></li><li><p>调用bind函数分配IP地址和端口号</p></li><li><p>调用listen函数转为可接收请求状态</p></li><li><p>调用accept函数受理连接请求（accept函数会再返回一个套接字）</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20211010113502.png"></p></li></ol><h1 id="读写过程中的函数"><a href="#读写过程中的函数" class="headerlink" title="读写过程中的函数"></a>读写过程中的函数</h1><p>虽然说是两组分别用在不同操作系统的函数，但实际上来说，几乎是都可以用的</p><h2 id="read函数和write函数（听说大多数用在linux）"><a href="#read函数和write函数（听说大多数用在linux）" class="headerlink" title="read函数和write函数（听说大多数用在linux）"></a>read函数和write函数（听说大多数用在linux）</h2><h3 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h3><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &lt;unistd.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(inf fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> bnytes)</span></span>;<span class="comment">//成功时返回接收的字节数（但遇到文件结尾则返回0），失败时返回-1</span></span><br></pre></td></tr></table></figure><ul><li>fd：显示数据接收对象的文件描述符</li><li>buf：要保存接收数据的缓冲地址值</li><li>nbytes：要接收数据的最大字节数</li></ul><h3 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>fd：显示数据接收对象的文件描述符</li><li>buf：要保存接收数据的缓冲地址值</li><li>nbytes：要接收数据的最大字节数</li></ul><h2 id="recv函数和send函数（大多数用在windows）"><a href="#recv函数和send函数（大多数用在windows）" class="headerlink" title="recv函数和send函数（大多数用在windows）"></a>recv函数和send函数（大多数用在windows）</h2><h3 id="recv函数"><a href="#recv函数" class="headerlink" title="recv函数"></a>recv函数</h3><p>recv和read相似，都可用来接收sockfd发送的数据，但recv比read多了一个参数，也就是第四个参数，它可以指定标志来控制如何接收数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>&gt;(recvnum = recv(connectd,recv_buf,<span class="keyword">sizeof</span>(recv_buf),<span class="number">0</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">    perror(<span class="string">&quot;recv error\n&quot;</span>);</span><br><span class="line">    close(connectd);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">recv_buf[recvnum]=<span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="send函数"><a href="#send函数" class="headerlink" title="send函数"></a>send函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(SOCKET sock, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>&gt;send(sockfd,send_buf,<span class="keyword">sizeof</span>(send_buf),<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;error occar in sending data\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他小tips"><a href="#其他小tips" class="headerlink" title="其他小tips"></a>其他小tips</h1><h2 id="ssize-t和size-t数据类型"><a href="#ssize-t和size-t数据类型" class="headerlink" title="ssize_t和size_t数据类型"></a>ssize_t和size_t数据类型</h2><ul><li>ssize_t是有符号整型，在32位机器上等同与int，在64位机器上等同与long int</li></ul><p>几乎没有什么区别，就是一个整型变量</p><ul><li>size_t 就是无符号型的ssize_t，也就是unsigned long/ unsigned int (在32位下）<ul><li>size_t的正确定义应该是typedef unsigned long size_t。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络编程中的一些函数的具体用法&lt;/p&gt;
&lt;h1 id=&quot;socket创建过程的一些函数&quot;&gt;&lt;a href=&quot;#socket创建过程的一些函数&quot; class=&quot;headerlink&quot; title=&quot;socket创建过程的一些函数&quot;&gt;&lt;/a&gt;socket创建过程的一些函数&lt;/h</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="学习笔记" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习" scheme="https://thanyi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言网络编程中几个结构体的用法</title>
    <link href="https://thanyi.github.io/2021/10/09/017c%E8%AF%AD%E8%A8%80%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%AD%E5%87%A0%E4%B8%AA%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://thanyi.github.io/2021/10/09/017c%E8%AF%AD%E8%A8%80%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%AD%E5%87%A0%E4%B8%AA%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2021-10-09T15:25:17.000Z</published>
    <updated>2021-10-08T16:29:54.314Z</updated>
    
    <content type="html"><![CDATA[<p>C语言网络编程中有很多结构体，其中很多的结构体对我来说很混乱，难以记住，想要先整理一下</p><h1 id="用来处理网络通信的地址"><a href="#用来处理网络通信的地址" class="headerlink" title="用来处理网络通信的地址"></a>用来处理网络通信的地址</h1><h2 id="struct-sockaddr"><a href="#struct-sockaddr" class="headerlink" title="struct sockaddr"></a>struct sockaddr</h2><p>sockaddr在头文件<code>#include &lt;sys/socket.h&gt;</code>中定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family;  <span class="comment">/* 地址族, AF_xxx */</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];  <span class="comment">/* 14字节的协议地址*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="struct-sockaddr-in"><a href="#struct-sockaddr-in" class="headerlink" title="struct sockaddr_in"></a>struct sockaddr_in</h2><p>sockaddr_in在头文件<code>#include&lt;netinet/in.h&gt;或#include &lt;arpa/inet.h&gt;</code>中定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sin_family; <span class="comment">/* 地址族 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port; <span class="comment">/* 端口号 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* Internet地址 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">/* 与struct sockaddr一样的长度 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="in-addr"><a href="#in-addr" class="headerlink" title="in_addr"></a>in_addr</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> s_addr;   <span class="comment">//32位ipv4的地址</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是个32位的ip地址，应该是用的16进制进行表示，比如说192.168.0.1就是（0xC0A80001）</p><h2 id="sockaddr和sockaddr-in的区别"><a href="#sockaddr和sockaddr-in的区别" class="headerlink" title="sockaddr和sockaddr_in的区别"></a>sockaddr和sockaddr_in的区别</h2><p>sockaddr常用于bind、connect、recvfrom、sendto等函数的参数，指明地址信息，是一种通用的套接字地址。</p><p>sockaddr_in 是internet环境下套接字的地址形式。所以在网络编程中我们会对sockaddr_in结构体进行操作，使用sockaddr_in来建立所需的信息，最后使用类型转化就可以了。一般先把sockaddr_in变量赋值后，强制类型转换后传入用sockaddr做参数的函数：sockaddr_in用于socket定义和赋值；</p><h1 id="其他相关函数"><a href="#其他相关函数" class="headerlink" title="其他相关函数"></a>其他相关函数</h1><h2 id="htons-和-inet-addr"><a href="#htons-和-inet-addr" class="headerlink" title="htons() 和 inet_addr()"></a>htons() 和 inet_addr()</h2><p>htons()作用是将端口号由主机字节序转换为网络字节序的整数值。(host to net)（都是简写还挺好记的）</p><p>inet_addr()作用是将一个IP字符串转化为一个网络字节序的整数值，用于sockaddr_in.sin_addr.s_addr。</p><h2 id="inet-ntoa"><a href="#inet-ntoa" class="headerlink" title="inet_ntoa()"></a>inet_ntoa()</h2><p>将一个sin_addr结构体输出成IP字符串(network to ascii)。</p><h1 id="给socket赋值的方法"><a href="#给socket赋值的方法" class="headerlink" title="给socket赋值的方法"></a>给socket赋值的方法</h1><h2 id="给地址赋值"><a href="#给地址赋值" class="headerlink" title="给地址赋值"></a>给地址赋值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">inet_aton(server_addr_string,&amp;myaddr.sin_addr); <span class="comment">//myaddr是一个sockaddr_in的结构体</span></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">myaddr.sin_addr.s_addr = inet_addr(<span class="string">&quot;这里写你要输入的ip地址，ipv4格式的就好了&quot;</span>)    </span><br></pre></td></tr></table></figure><h2 id="给端口赋值"><a href="#给端口赋值" class="headerlink" title="给端口赋值"></a>给端口赋值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myaddr.sin_port = htons(端口数目)  <span class="comment">//括号里面就是数字就好了</span></span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line">sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">/* 套接字创建，返回值如果是-1就代表没创建成功 */</span></span><br><span class="line"></span><br><span class="line">my_addr.sin_family = AF_INET; <span class="comment">/* 主机字节序 这里指使用ipv4 */</span> </span><br><span class="line">my_addr.sin_port = htons(MYPORT); <span class="comment">/* short, 网络字节序 */</span></span><br><span class="line">my_addr.sin_addr.s_addr = inet_addr(“<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>″);</span><br><span class="line"></span><br><span class="line">bzero(&amp;(my_addr.sin_zero), <span class="number">8</span>); <span class="comment">/* zero the rest of the struct */</span></span><br><span class="line"><span class="comment">/* bind()表示与my_addr中的ip地址来进行连接 */</span></span><br><span class="line">bind(sockfd, (struct sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(struct sockaddr));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考博客：<a href="https://blog.csdn.net/will130/article/details/53326740">https://blog.csdn.net/will130/article/details/53326740</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C语言网络编程中有很多结构体，其中很多的结构体对我来说很混乱，难以记住，想要先整理一下&lt;/p&gt;
&lt;h1 id=&quot;用来处理网络通信的地址&quot;&gt;&lt;a href=&quot;#用来处理网络通信的地址&quot; class=&quot;headerlink&quot; title=&quot;用来处理网络通信的地址&quot;&gt;&lt;/a&gt;用来</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="学习笔记" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习" scheme="https://thanyi.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于python中beautifulsoup库的用法(超简单)</title>
    <link href="https://thanyi.github.io/2021/09/09/016%E5%85%B3%E4%BA%8Epython%E4%B8%ADbeautiful%E5%BA%93%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://thanyi.github.io/2021/09/09/016%E5%85%B3%E4%BA%8Epython%E4%B8%ADbeautiful%E5%BA%93%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2021-09-09T07:19:01.000Z</published>
    <updated>2021-09-09T16:35:27.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有节实验课研究了爬虫，我深刻地感觉到了xpath就不适合玩爬虫（个人见解），于是我开始试着重新复习beautifulsoup库了</p><h1 id="beautifulsoup库的使用"><a href="#beautifulsoup库的使用" class="headerlink" title="beautifulsoup库的使用"></a>beautifulsoup库的使用</h1><h2 id="安装和引用"><a href="#安装和引用" class="headerlink" title="安装和引用"></a>安装和引用</h2><p>安装直接pip安装就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(res_text,<span class="string">&quot;html.parser&quot;</span>,from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><p>html.parser 是一个算是用于解释html文档的东西</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先我需要一个html文档，一般来说是用了requests模块以后得来的content</p><p>然后使用的语法</p><h4 id="查找标签"><a href="#查找标签" class="headerlink" title="查找标签"></a>查找标签</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test1 = soup.findAll(<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"><span class="comment">#这个是指我要这个文档里面所有的a标签，包括了&lt;a&gt;一起，有一个像是list的返回，类型叫做ResultSet</span></span><br><span class="line">test2 = soup.findAll(<span class="string">&#x27;a&#x27;</span>,class_=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="comment">#在上面的基础上，我要的是所有class是&#x27;xxx&#x27;的标签</span></span><br><span class="line">test3 = soup.findAll(<span class="string">&#x27;a&#x27;</span>,class_=<span class="string">&#x27;xxx&#x27;</span>,text=<span class="string">&#x27;story&#x27;</span>)</span><br><span class="line"><span class="comment">#标签里面的文本筛选</span></span><br></pre></td></tr></table></figure><p>我们还可以和著名的re库，也就是正则表达式一起用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test4 = soup.findAll(<span class="string">&#x27;a&#x27;</span>,class_=<span class="string">&#x27;xxx&#x27;</span>,text=re.<span class="built_in">compile</span>(<span class="string">&#x27;.*?story.*?&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="查找标签里的内容"><a href="#查找标签里的内容" class="headerlink" title="查找标签里的内容"></a>查找标签里的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> test1:</span><br><span class="line">print(item.get_text())</span><br><span class="line"><span class="comment">#get_text()可以把标签里面的内容全部弄出来，不管你是不是普通的text，还是有&lt;em&gt;标签，都可以</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前有节实验课研究了爬虫，我深刻地感觉到了xpath就不适合玩爬虫（个人见解），于是我开始试着重新复习beautifulsoup库了&lt;/p&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python库" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/python%E5%BA%93/"/>
    
    
    <category term="python" scheme="https://thanyi.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>numpy的学习笔记</title>
    <link href="https://thanyi.github.io/2021/09/08/015python%E4%B8%ADnumpy%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://thanyi.github.io/2021/09/08/015python%E4%B8%ADnumpy%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2021-09-08T13:51:58.000Z</published>
    <updated>2021-09-14T01:39:14.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，numpy是机器学习和深度学习的基础，数据运算在数据挖掘领域也是有着丰富的用途，numpy、matplotlib的用法是很基础的事情，这里稍微总结一下，知识不多，学多少总结多少</p><p>菜鸟教程相关内容有很多，这里给个链接，我只总结一下少数东西</p><h1 id="numpy的一些小用法"><a href="#numpy的一些小用法" class="headerlink" title="numpy的一些小用法"></a>numpy的一些小用法</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在numpy中的数组，其实就是我们在线性代数中学习的矩阵，矩阵在线性代数的地位自然不用我多说，所以numpy、matplotlib中很多东西都离不开这个数组</p><h2 id="数组创建（从头创建）"><a href="#数组创建（从头创建）" class="headerlink" title="数组创建（从头创建）"></a>数组创建（从头创建）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.empty([<span class="number">3</span>,<span class="number">3</span>]) <span class="comment">#x是一个3行3列的矩阵，里面都是一些随机数，因为没有初始化</span></span><br><span class="line">y = np.zeros((<span class="number">2</span>,<span class="number">2</span>), dtype = np.<span class="built_in">int</span>) <span class="comment">#这个是全是0的2*2矩阵</span></span><br><span class="line">z = np.ones((<span class="number">2</span>,<span class="number">2</span>), dtype = np.<span class="built_in">int</span>) <span class="comment">#和上面一样</span></span><br></pre></td></tr></table></figure><p>这就是普通的从头开始创建</p><h2 id="数组创建（按数值范围创建）"><a href="#数组创建（按数值范围创建）" class="headerlink" title="数组创建（按数值范围创建）"></a>数组创建（按数值范围创建）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = numpy.arange(<span class="number">5</span>) <span class="comment">#[0  1  2  3  4] 这就是按照一个范围来的</span></span><br><span class="line">y = numpy.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>) <span class="comment">#[10  12  14  16  18] 从10到20，步长为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个是一维数组的创建，等差数列的创建，从1到10，创10个</span></span><br><span class="line">x1 = numpy.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>) <span class="comment">#[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]</span></span><br><span class="line"><span class="comment">#这个是一维数组的创建，并且有一个间距展示</span></span><br><span class="line">y1 = numpy.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>,retstep= <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#(array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]), 1.0)</span></span><br></pre></td></tr></table></figure><h2 id="更改数组的形状"><a href="#更改数组的形状" class="headerlink" title="更改数组的形状"></a>更改数组的形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">b =np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>).reshape([<span class="number">10</span>,<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 1.]</span></span><br><span class="line"><span class="string"> [ 2.]</span></span><br><span class="line"><span class="string"> [ 3.]</span></span><br><span class="line"><span class="string"> [ 4.]</span></span><br><span class="line"><span class="string"> [ 5.]    变成了一个【10,1】的矩阵</span></span><br><span class="line"><span class="string"> [ 6.]</span></span><br><span class="line"><span class="string"> [ 7.]</span></span><br><span class="line"><span class="string"> [ 8.]</span></span><br><span class="line"><span class="string"> [ 9.]</span></span><br><span class="line"><span class="string"> [10.]]   </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个等差数列的np.logspace(),是同一种的用法</p><h1 id="matplotlib用法"><a href="#matplotlib用法" class="headerlink" title="matplotlib用法"></a>matplotlib用法</h1><p>菜鸟教程：<a href="https://www.runoob.com/matplotlib/matplotlib-tutorial.html">https://www.runoob.com/matplotlib/matplotlib-tutorial.html</a></p><h2 id="matplotlib中的pyplot子库"><a href="#matplotlib中的pyplot子库" class="headerlink" title="matplotlib中的pyplot子库"></a>matplotlib中的pyplot子库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">0</span>, <span class="number">6</span>])</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(x, y) <span class="comment">#拿着两个矩阵进去居然是！</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210908214821.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xpoints &#x3D; np.array([1, 2, 6, 8])</span><br><span class="line">ypoints &#x3D; np.array([3, 8, 1, 10])</span><br><span class="line"></span><br><span class="line">plt.plot(xpoints, ypoints)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210908214849.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;众所周知，numpy是机器学习和深度学习的基础，数据运算在数据挖掘领域也是有着丰富的用途，numpy、matplotlib的用法是很基础的事</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="numpy" scheme="https://thanyi.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>ctf基础题02</title>
    <link href="https://thanyi.github.io/2021/08/07/014ctf%E5%9F%BA%E7%A1%80%E9%A2%9802/"/>
    <id>https://thanyi.github.io/2021/08/07/014ctf%E5%9F%BA%E7%A1%80%E9%A2%9802/</id>
    <published>2021-08-07T13:51:58.000Z</published>
    <updated>2021-08-14T09:51:26.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php2"><a href="#php2" class="headerlink" title="php2"></a>php2</h1><p>知识点总结：</p><p><strong>一、关于phps</strong></p><p>这是个没有想到的网站名，需要记一下</p><p><strong>二、urldecode/urlencode</strong></p><p>这是将不是英文和数字（准确来说是非ascii码的字符）进行一次url实体编码和解码的行为</p><p>注意：在浏览器中，输入的参数是会先经过url实体编码，变成形如%12（%和两个十六进制）的样子，再进行运算</p><h1 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h1><p>总结：</p><p>一、关于序列化和反序列化</p><p>总的来说就是php中的对象和字符串之间互相转换的一种方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------序列化之后-------------------------</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;xctf&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>注意：在序列化之后只会有变量存储在字符串中，对象的方法就不会（大概是因为这些方法一开始就存储在硬盘中而不是内存中，不会在完成一段程序之后被销毁吧）</p><p>二、魔法方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__wakeup()和__sleep()方法</span><br><span class="line">__wakeup方法针对反序列化</span><br><span class="line">__sleep方法针对序列化</span><br><span class="line">这两个方法的意思都是 当开始序列化或者开始反序列化时</span><br><span class="line">会优先使用这两个魔法方法，在得到序列化（反序列化）结果的同时得到魔法方法使用结果</span><br></pre></td></tr></table></figure><p>比如上一个class中，在实现反序列化之前，会先执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br></pre></td></tr></table></figure><p>三、魔法方法漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">只是针对__wakeup()方法</span><br><span class="line">在给入的参数中属性的数目大于真实的属性数目时，会绕开__wakeup函数</span><br><span class="line">注意：PHP5&lt;<span class="number">5.6</span><span class="number">.25</span></span><br><span class="line"> PHP7&lt;<span class="number">7.0</span><span class="number">.10</span></span><br><span class="line">才行</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php2&quot;&gt;&lt;a href=&quot;#php2&quot; class=&quot;headerlink&quot; title=&quot;php2&quot;&gt;&lt;/a&gt;php2&lt;/h1&gt;&lt;p&gt;知识点总结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、关于phps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是个没有想到的网站名，需要记</summary>
      
    
    
    
    <category term="ctf" scheme="https://thanyi.github.io/categories/ctf/"/>
    
    <category term="基础" scheme="https://thanyi.github.io/categories/ctf/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="ctf" scheme="https://thanyi.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>关于NLP的学习</title>
    <link href="https://thanyi.github.io/2021/08/06/013NLP%E5%AD%A6%E4%B9%A0_pytorch/"/>
    <id>https://thanyi.github.io/2021/08/06/013NLP%E5%AD%A6%E4%B9%A0_pytorch/</id>
    <published>2021-08-06T15:37:53.000Z</published>
    <updated>2021-09-14T01:37:20.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习的概念"><a href="#深度学习的概念" class="headerlink" title="深度学习的概念"></a>深度学习的概念</h1><p>深度学习从广义上来讲就是程序可以自己学习自己的意思。是指一个已经写好的代码程序经过大量的数据使得自身得到了发展</p><p>总共有三个部分的特征：</p><p>一、反向传播算法</p><p>二、特征提取能力</p><p>三、端到端之间的学习方法</p><h1 id="学习pytorch"><a href="#学习pytorch" class="headerlink" title="学习pytorch"></a>学习pytorch</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>中间有三个特点：</p><p>1、完全符合python编程（tensorflow就不行，是在python语法和TensorFlow自己有些格式之间转换）</p><p>2、方便的张量（tensor）计算 –&gt;可以将变量加载到GPU（图形处理器）上</p><p>3、对动态计算图的支持 —-&gt;动态计算图，是pytorch的特有特性，是可以用来表示反向传播算法的一种图示</p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210806235217.png"><h2 id="使用pytorch进行深度学习的步骤"><a href="#使用pytorch进行深度学习的步骤" class="headerlink" title="使用pytorch进行深度学习的步骤"></a>使用pytorch进行深度学习的步骤</h2><h3 id="构建神经网络模型"><a href="#构建神经网络模型" class="headerlink" title="构建神经网络模型"></a>构建神经网络模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">neu = torch.nn.Sequential(</span><br><span class="line">torch.nn.Linear(input_size,hidden_size), <span class="comment">#输入层到隐含层之间的线性运算</span></span><br><span class="line">torch.nn.Sigmoid(),<span class="comment">#作用在对隐含层的每一个神经元</span></span><br><span class="line">torch.nn.Linear(hidden_size,output_size),  <span class="comment">#从隐含层到输出层的线性运算</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个格式的参数输入可以将所有神经网络的参数储存在neu.parameters中</p><p><strong>其中输入层的每一个神经元都是多维向量的一个维度</strong></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210807204929.png"></p><h3 id="建立损失函数和优化器"><a href="#建立损失函数和优化器" class="headerlink" title="建立损失函数和优化器"></a>建立损失函数和优化器</h3><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>用来评价模型的<strong>预测值</strong>和<strong>真实值</strong>不一样的程度，损失函数越好，通常模型的性能越好。不同的模型用的损失函数一般也不一样。</p><p>pytorch中的损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cost = torch.nn.MSELoss()</span><br></pre></td></tr></table></figure><p>torch.nn.MSELoss() &lt;——–&gt;  torch.mean((y-y*)^2)</p><p>意识是预测值和真实值差的平方的平均值</p><p>cost是函数指针，指向这个mseloss函数</p><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(neu.parameters(),lr=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><p>neu.parameters是定义好的神经网络中的所有等待被优化的所有参数的集合</p><p>lr是学习效率参数</p><h3 id="对神经网络进行分批次训练"><a href="#对神经网络进行分批次训练" class="headerlink" title="对神经网络进行分批次训练"></a>对神经网络进行分批次训练</h3><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>类型变量：数值的大小没有特殊的含义。比如说预测当地此时具有的共享单车数的时候的”星期几”这个变量。与之相对的是–特征变量(特征属性，在一个表中的特征列)</p><h2 id="预处理手段"><a href="#预处理手段" class="headerlink" title="预处理手段"></a>预处理手段</h2><p>一、对类型变量进行类型编码，比如one-hot编码</p><p>二、数据变量标准化(归一化)，对数值变量进行统一化运算，使其更加方便运算。(比如对数据减去均值再除以方差)</p><p> <img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210807203214.png"></p><p>三、分批训练，将其分类为训练集、测试集。还有将其切分成小批，一批一批地进入神经网络，每一批训练网络一次</p><h1 id="实例：关于分类相关的深度学习"><a href="#实例：关于分类相关的深度学习" class="headerlink" title="实例：关于分类相关的深度学习"></a>实例：关于分类相关的深度学习</h1><p>例子：文本分类的问题</p><h2 id="文本向量化"><a href="#文本向量化" class="headerlink" title="文本向量化"></a>文本向量化</h2><p>文本向量化是将一个不固定长度的文本变成一个固定长度的向量</p><p>所采用的技术就是<strong>词袋模型</strong></p><p><strong>词袋模型</strong>是指将一段文本的所有词视为一个装满文本的大袋子，忽略单词之间的顺序，只看频率，并且将这个大袋子中的单词全部变成向量，有多少个单词就是多少维的向量</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我 爱 北京 天安门</span><br><span class="line">每个 人 都有 一个 爱 的 人</span><br></pre></td></tr></table></figure><p>那么我们对应的单词表就是</p><p>{我，爱，北京，天安门，每个，人，都有，一个，的}—–&gt; 九维向量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我 爱 北京 天安门</span><br><span class="line">&#123;1&#x2F;4，1&#x2F;4，1&#x2F;4，1&#x2F;4，0，0，0，0，0&#125;  #向量表示</span><br><span class="line">每个 人 都有 一个 爱 的 人</span><br><span class="line">&#123;0，1&#x2F;7，0，0，1&#x2F;7，2&#x2F;7，1&#x2F;7，1&#x2F;7，1&#x2F;7&#125; #向量表示</span><br></pre></td></tr></table></figure><h2 id="构造分类器"><a href="#构造分类器" class="headerlink" title="构造分类器"></a>构造分类器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; nn.Sequential(</span><br><span class="line">nn.Linear(input_size,hidden_size),</span><br><span class="line">nn.ReLU(), #在计算的速度上更快，并且有利于梯度信息的传递，在一定程度上避免了梯度爆炸的问题</span><br><span class="line">nn.Linear(hidden_size,2), #2是因为这个就是个分类，我们假设分成2类</span><br><span class="line">nn.LogSoftmax(dim&#x3D;), #用于解决分类问题的分类输出层计算</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="pytorch的工具"><a href="#pytorch的工具" class="headerlink" title="pytorch的工具"></a>pytorch的工具</h1><h2 id="TensorBoard的使用"><a href="#TensorBoard的使用" class="headerlink" title="TensorBoard的使用"></a>TensorBoard的使用</h2><p>TensorBoard是一个对于我们想要展示的图片的展示平台</p><p>在存在pytorch的环境里面的终端使用命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir logs(这个是你规定的文件夹名) --port 你的端口</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210913155329.png"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>首先需要导入包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>对SummaryWriter生成对象，使用PIL来将路径中的图片来变成对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">writer &#x3D; SummaryWriter(&#39;logs&#39;)</span><br><span class="line">img_path &#x3D; &#39;data&#x2F;train&#x2F;ants_img&#x2F;5650366_e22b7e1065.jpg&#39;</span><br><span class="line">image_PIL &#x3D; Image.open(img_path)</span><br></pre></td></tr></table></figure><p>使用numpy把PIL的对象变成numpy的数组，再导入进Writer对象，（writer中只接受numpy数组或者其他的参数，反正PIL的不行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img_array = np.array(image_PIL)</span><br><span class="line">writer.add_image(<span class="string">&#x27;train&#x27;</span>,img_array,<span class="number">1</span>,dataformats=<span class="string">&#x27;HWC&#x27;</span>) </span><br><span class="line">//参数分别是名字，数组（数据），<span class="number">1</span>是指step，每次变的话可要在tensorboard上有很多步骤，hwc是一种格式问题</span><br></pre></td></tr></table></figure><p><img src="/2021/08/06/013NLP%E5%AD%A6%E4%B9%A0_pytorch/Users\ethanyi\AppData\Roaming\Typora\typora-user-images\image-20210913162314922.png" alt="image-20210913162314922"></p><p>或者我如果想要添加数组，做图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=5x&quot;</span>,<span class="number">3</span>*i,i)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210913162217.png"></p><p>最后关闭函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="transform使用"><a href="#transform使用" class="headerlink" title="transform使用"></a>transform使用</h2><p>transform是pytorch中的一个工具箱，里面有很多的功能工具</p><p>一般来说是用来对图片做一些处理，输入一个图片，输出一个结果</p><h3 id="用法（以totensor-为例）"><a href="#用法（以totensor-为例）" class="headerlink" title="用法（以totensor()为例）"></a>用法（以totensor()为例）</h3><p>首先弄一个对象，transform的对象，再输入一个图片类型 就可以对其操作，进行输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">import cv2</span><br><span class="line">from torchvision.transforms import transforms</span><br><span class="line"></span><br><span class="line">img_path&#x3D;&#39;data&#x2F;train&#x2F;ants_img&#x2F;5650366_e22b7e1065.jpg&#39;</span><br><span class="line">writer &#x3D; SummaryWriter(&#39;logs&#39;)</span><br><span class="line">img &#x3D; cv2.imread(img_path)</span><br><span class="line"></span><br><span class="line">tensor_trans &#x3D; transforms.ToTensor()</span><br><span class="line">trans_img &#x3D; tensor_trans(img)</span><br><span class="line"></span><br><span class="line">writer.add_image(&#39;test1&#39;, trans_img)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p>还有很多其他的，compose()主要是合并，resize()是改变图片大小</p><p>就懒得讲了</p><h1 id="pytorch数据集的读取"><a href="#pytorch数据集的读取" class="headerlink" title="pytorch数据集的读取"></a>pytorch数据集的读取</h1><h2 id="torchvision中的datasets和DataLoader"><a href="#torchvision中的datasets和DataLoader" class="headerlink" title="torchvision中的datasets和DataLoader"></a>torchvision中的datasets和DataLoader</h2><p>这是一个图片的数据集的模块，有关图片的数据的读取利用都是用这个模块</p><h3 id="dataset用法"><a href="#dataset用法" class="headerlink" title="dataset用法"></a>dataset用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dayo2/dataset&#x27;</span>,train=<span class="literal">True</span>,transform=dataset_transform,download=<span class="literal">True</span>)</span><br><span class="line">//train 是指算不算训练集，transform是对这个数据集开始使用的工具</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dayo2/dataset&#x27;</span>,train=<span class="literal">False</span>,transform=dataset_transform,download=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="DataLoader用法"><a href="#DataLoader用法" class="headerlink" title="DataLoader用法"></a>DataLoader用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line">//参数分别是之前的数据集，batch_size是一次性取出来的数目，shuffle是指是否两次之间要打乱抽取，drop_last为<span class="literal">False</span>指最后不足<span class="number">64</span>的要不要舍弃</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;day03_log&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        img,target = data</span><br><span class="line">        writer.add_images(<span class="string">&quot;epoch:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch),img,global_step=step)</span><br><span class="line">        step +=<span class="number">1</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210914093625.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深度学习的概念&quot;&gt;&lt;a href=&quot;#深度学习的概念&quot; class=&quot;headerlink&quot; title=&quot;深度学习的概念&quot;&gt;&lt;/a&gt;深度学习的概念&lt;/h1&gt;&lt;p&gt;深度学习从广义上来讲就是程序可以自己学习自己的意思。是指一个已经写好的代码程序经过大量的数据使得自身</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://thanyi.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于实训中的一些小知识</title>
    <link href="https://thanyi.github.io/2021/07/11/012%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
    <id>https://thanyi.github.io/2021/07/11/012%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</id>
    <published>2021-07-11T08:59:53.000Z</published>
    <updated>2021-08-14T09:42:09.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于一些常用的payload"><a href="#关于一些常用的payload" class="headerlink" title="关于一些常用的payload"></a>关于一些常用的payload</h2><p>这是一个在网页中输入的可以保证使用的payload，通过php文件可以看到很多东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.xxx.xxx.xxx/?***=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> *** <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>利用sql语句注入一句话木马的payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;&lt;?php *** ?&gt;&quot; <span class="keyword">into</span> outfile &quot;路径&quot;</span><br></pre></td></tr></table></figure><h2 id="linux的常用命令"><a href="#linux的常用命令" class="headerlink" title="linux的常用命令"></a>linux的常用命令</h2><p>查找想要查找从根目录 / 开始的文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -name &quot;文件名&quot;</span><br></pre></td></tr></table></figure><p>查找这个文件后面的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -type f</span><br></pre></td></tr></table></figure><h2 id="php中的一些基础函数"><a href="#php中的一些基础函数" class="headerlink" title="php中的一些基础函数"></a>php中的一些基础函数</h2><h3 id="var-dump-函数"><a href="#var-dump-函数" class="headerlink" title="var_dump()函数"></a>var_dump()函数</h3><p>这个函数是用来表示一个函数的类型和大小的</p><h3 id="mb-strpos-函数和strpos-函数"><a href="#mb-strpos-函数和strpos-函数" class="headerlink" title="mb_strpos()函数和strpos()函数"></a>mb_strpos()函数和strpos()函数</h3><p>这个函数是用来用在要检测在字符串中的子串第一次出现的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(mb_strpos(<span class="string">&#x27;开始23测试ceshi&#x27;</span>, <span class="string">&#x27;测试&#x27;</span>));</span><br><span class="line"><span class="keyword">int</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>注意：这个是按照字来处理的，也就是说是两个字节</p><p>strpos()函数是差不多类似的，但是就是按照字节来算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(strpos(<span class="string">&#x27;开始23测试ceshi&#x27;</span>, <span class="string">&#x27;测试&#x27;</span>));</span><br><span class="line"><span class="keyword">int</span>(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>并且如果没有这个子串，那就是整个字符串的长度</p><h3 id="in-array-x-y-函数"><a href="#in-array-x-y-函数" class="headerlink" title="in_array($x, $y)函数"></a>in_array($x, $y)函数</h3><p>注意顺序，这个是表示x在y中</p><h2 id="sqlmap的post注入用法"><a href="#sqlmap的post注入用法" class="headerlink" title="sqlmap的post注入用法"></a>sqlmap的post注入用法</h2><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>sqlmap的post注入需要一个参数是注入点的参数</p><p>我们可以使用形如</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://<span class="number">111</span>.<span class="number">200</span>.<span class="number">241</span>.<span class="number">244</span>:<span class="number">50506</span>/ --data search=<span class="number">1</span> -D news -T secret_table --dump </span><br></pre></td></tr></table></figure><p>这样的形式直接获得数据</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>先在burp中把请求保存成本地文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r 事前在burpsuite中保存成文件的数据 -p 参数 -D 库名 -T 表名 --dump </span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r C:\Users\ethanyi\Desktop\post.txt -p search -D news -T secret_table --dump </span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式有些是以下方格式（在javascript的match函数中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^hfuhfa&#x2F;</span><br><span class="line">&#x2F;hsofhsudo$&#x2F;</span><br></pre></td></tr></table></figure><p>其中^是表示了匹配开头是那个的样子</p><p>$表示匹配的末尾是上方那个字符串</p><h2 id="javascript的eval函数"><a href="#javascript的eval函数" class="headerlink" title="javascript的eval函数"></a>javascript的eval函数</h2><p>eval()函数中的参数是一个字符串，这个字符串是可以执行的代码，eval函数的意义就是使用这个代码来执行</p><h2 id="关于php"><a href="#关于php" class="headerlink" title="关于php"></a>关于php</h2><h3 id="php的-和"><a href="#php的-和" class="headerlink" title="php的==和==="></a>php的==和===</h3><p>==在php中是指数值比较</p><p>===在php中是数值和类型比较</p><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="variable">$b</span>)</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;true&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;false&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>===<span class="variable">$b</span>)</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;true&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;false&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果分别是true、false</p><p>除此之外：php中，非数值性的字符串和数字比较时，字符串会先转变为数字0，再来和数字比较</p><p>其中：</p><p>1、形如”aa111111”的字符串，会直接变为0</p><p>2、形如”1111aa”的字符串，会变成1111</p><p>3、形如”aaa111aaa”的字符串，会变成0</p><p>4、形如”111aaa111”的字符串，会变成111</p><p>(别问，问就是试出来的)</p><h2 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h2><p>SSTI（Server-Side Template Injection）服务器端模板注入</p><h3 id="python-flask模板"><a href="#python-flask模板" class="headerlink" title="python  flask模板"></a>python  flask模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在flask中：使用Jinja2模板引擎，&#123;&#123;&#125;&#125;是变量包裹标识符。&#123;&#123;&#125;&#125;并不仅仅可以传递变量，还可以执行一些简单的表达式。</span><br></pre></td></tr></table></figure><h3 id="一些payload或者说魔术方法"><a href="#一些payload或者说魔术方法" class="headerlink" title="一些payload或者说魔术方法"></a>一些payload或者说魔术方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__class__  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类  &#x2F;&#x2F; __base__和__mro__都是用来寻找基类的</span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure><p>有用的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;</span><br><span class="line">os&#39;].popen(&#39;ls&#39;).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;</span><br><span class="line">os&#39;].system(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><p>详情可以看<a href="https://www.freebuf.com/column/187845.html%EF%BC%8C%E6%88%91%E8%A7%89%E5%BE%97%E5%86%99%E5%BE%97%E5%BE%88%E8%AF%A6%E7%BB%86">https://www.freebuf.com/column/187845.html，我觉得写得很详细</a></p><h3 id="os-system和-os-popen"><a href="#os-system和-os-popen" class="headerlink" title="os.system和 os.popen"></a>os.system和 os.popen</h3><p>这两句前者返回 <strong>退出状态码</strong> , 后者 <strong>以file 形式</strong> 返回 <strong>输出内容</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于一些常用的payload&quot;&gt;&lt;a href=&quot;#关于一些常用的payload&quot; class=&quot;headerlink&quot; title=&quot;关于一些常用的payload&quot;&gt;&lt;/a&gt;关于一些常用的payload&lt;/h2&gt;&lt;p&gt;这是一个在网页中输入的可以保证使用的payl</summary>
      
    
    
    
    <category term="ctf" scheme="https://thanyi.github.io/categories/ctf/"/>
    
    <category term="小结" scheme="https://thanyi.github.io/categories/ctf/%E5%B0%8F%E7%BB%93/"/>
    
    
    <category term="ctf" scheme="https://thanyi.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ctf基础题</title>
    <link href="https://thanyi.github.io/2021/07/10/011ctf%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <id>https://thanyi.github.io/2021/07/10/011ctf%E5%9F%BA%E7%A1%80%E9%A2%98/</id>
    <published>2021-07-10T08:59:53.000Z</published>
    <updated>2021-08-14T09:38:31.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目1：掀桌子"><a href="#题目1：掀桌子" class="headerlink" title="题目1：掀桌子"></a>题目1：掀桌子</h2><h4 id="菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子-╯°□°）╯︵-┻━┻"><a href="#菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子-╯°□°）╯︵-┻━┻" class="headerlink" title="菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子(╯°□°）╯︵ ┻━┻"></a>菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子(╯°□°）╯︵ ┻━┻</h4><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>我们可以看出这个“c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1…”这种格式，就是一个“\xc8\xe9..”这个样子的格式</p><p>所以这个好像是和字节ascii码有关，所以我们可以用把这个报文分组，这是个字节流</p><p>所以把这个字节流变化一下</p><p>变化的代码：</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210712190545.png"></p><p>也就是把字节流两两分组，又因为ascii码是8位并且首位是0，所以减128</p><p>所以就是在通过这个来变为flag</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210712190526.png"></p><p>解决</p><h2 id="题目2-ext3"><a href="#题目2-ext3" class="headerlink" title="题目2 ext3"></a>题目2 ext3</h2><h4 id="今天是菜狗的生日，他收到了一个linux系统光盘（附带了一个文件）"><a href="#今天是菜狗的生日，他收到了一个linux系统光盘（附带了一个文件）" class="headerlink" title="今天是菜狗的生日，他收到了一个linux系统光盘（附带了一个文件）"></a>今天是菜狗的生日，他收到了一个linux系统光盘（附带了一个文件）</h4><p>这个题是关于winhex运用的题，我已经很久没有用过winhex了，这次又把它重新安装了回来</p><h4 id="注：”ext”这个是指ext文件系统，即linux文件系统"><a href="#注：”ext”这个是指ext文件系统，即linux文件系统" class="headerlink" title="注：”ext”这个是指ext文件系统，即linux文件系统"></a>注：”ext”这个是指ext文件系统，即linux文件系统</h4><h4 id="winhex的一些重点"><a href="#winhex的一些重点" class="headerlink" title="winhex的一些重点"></a>winhex的一些重点</h4><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210712190747.png"></p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>这个东西虽然说是和linux系统相关，但我现在实在是不是很会linux，所以就先用上这个winhex了</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210712200722.png"></p><p>我真是服了！！有个wp上说可以直接改后缀名解压，艹</p><p>哦但是不行，我试了反正不行</p><p>但可以用360压缩，就很厉害，真的</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713000500.png"></p><p>发现是个base64然后在解密就好了</p><h2 id="题目3-simpleRAR"><a href="#题目3-simpleRAR" class="headerlink" title="题目3 simpleRAR"></a>题目3 simpleRAR</h2><h4 id="菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块-ps-双图层"><a href="#菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块-ps-双图层" class="headerlink" title="菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块(ps:双图层)"></a>菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块(ps:双图层)</h4><p>这个附件是一个压缩包，可笑的是用bandzip和360压缩都只能解出一个</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713094735.png"></p><p>只有用winRAR的时候才有</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210814173749.png"></p><p>然后在网上搜rar压缩文件的格式，发现</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713113434.png"></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210814173812.png"></p><p>也就是说每个rar文件都是，先有两个字节是CRC校验码（循环冗余校验码？？），后有一个字节属于类型区别，我们要改的就是这个</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713113725.png"></p><p>改完之后用winhex打开发现是个gif，所以把后缀改了，但是打开还是个空的</p><p>所以我们又要用一个新软件，一个图片隐写的软件——stegsolve</p><p>在里面打开（不知道为什么我这里不能直接吧图片拖进去），然后发现在其中一个r通道里面有半块二维码</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713124409.png"></p><p>把那个gif文件放在ps里面又知道他有两个图层（ps一打开就有）</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713195018.png"></p><p>把这两个图层导出再通过stegsolve就可以匹配了</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713195003.png"></p><p>再用ps来p图</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210713195732.png"></p><p>一扫就知道flag了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目1：掀桌子&quot;&gt;&lt;a href=&quot;#题目1：掀桌子&quot; class=&quot;headerlink&quot; title=&quot;题目1：掀桌子&quot;&gt;&lt;/a&gt;题目1：掀桌子&lt;/h2&gt;&lt;h4 id=&quot;菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5</summary>
      
    
    
    
    <category term="ctf" scheme="https://thanyi.github.io/categories/ctf/"/>
    
    <category term="基础" scheme="https://thanyi.github.io/categories/ctf/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="-题目" scheme="https://thanyi.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>关于vim</title>
    <link href="https://thanyi.github.io/2021/07/09/010%E5%85%B3%E4%BA%8Evim/"/>
    <id>https://thanyi.github.io/2021/07/09/010%E5%85%B3%E4%BA%8Evim/</id>
    <published>2021-07-09T04:07:31.000Z</published>
    <updated>2021-08-04T14:00:58.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这个是之前找到的关于vim的简单和进阶操作"><a href="#这个是之前找到的关于vim的简单和进阶操作" class="headerlink" title="这个是之前找到的关于vim的简单和进阶操作"></a>这个是之前找到的关于vim的简单和进阶操作</h1><p><a href="https://www.cnblogs.com/chengjiawei/p/9339951.html">https://www.cnblogs.com/chengjiawei/p/9339951.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这个是之前找到的关于vim的简单和进阶操作&quot;&gt;&lt;a href=&quot;#这个是之前找到的关于vim的简单和进阶操作&quot; class=&quot;headerlink&quot; title=&quot;这个是之前找到的关于vim的简单和进阶操作&quot;&gt;&lt;/a&gt;这个是之前找到的关于vim的简单和进阶操作&lt;/</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vim" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/vim/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="教程" scheme="https://thanyi.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>flask框架的使用教程</title>
    <link href="https://thanyi.github.io/2021/06/05/009flask/"/>
    <id>https://thanyi.github.io/2021/06/05/009flask/</id>
    <published>2021-06-04T16:00:00.000Z</published>
    <updated>2021-06-05T12:41:00.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p>这个是关于我们要做的项目的学习</p><p>我们用了flask框架</p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>虚拟环境的配置保证了到时候项目交接的时候</p><p>让别的组员不用也在pip上面 配置很多东西</p><p>直接就放在这个项目包里面了</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在flask的文件项目里面可以自己新建一个settings.py</p><p>里面就是普通的关于配置的书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &#x3D;&quot;development&quot;</span><br><span class="line">DEBUG &#x3D; True</span><br></pre></td></tr></table></figure><p>然后在app.py中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.from_object(settings)</span><br></pre></td></tr></table></figure><p>就可以开始实施配置文件了</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>在pycharm中弄了flask项目以后，有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>这个是一个装饰器，也就是可以翻译成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span>    </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line"> app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,view_func=index)</span><br></pre></td></tr></table></figure><p>将路由和这个视图函数绑定在一起</p><p>注：app是一个Flask类弄出的对象，是整个flask项目的中心</p><p>具有各种和项目相关的方法和变量</p><h3 id="路由的变量规则"><a href="#路由的变量规则" class="headerlink" title="路由的变量规则"></a>路由的变量规则</h3><p>路由可以在里面加入一些变量，放入在路由里面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;str:key&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>key是一个变量，也可以不叫key，然后这个路由里面一旦涉及一个&lt;..&gt;变量，所对应的函数就要多一个参数,默认是字符串类型  </p><p>这些类型就是那些数据类型</p><p>还有一个path和uuid类型，了解就行</p><h3 id="路由中url重定向行为"><a href="#路由中url重定向行为" class="headerlink" title="路由中url重定向行为"></a>路由中url重定向行为</h3><p>在路由中，如果我的定义是最后有个”/“</p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><p>它会具有重定向。也就是说如果我在浏览器里面是写的”/index/“</p><p>它也会重定向到”/index”这里，顺便一说此时的返回状态码是30x(也就是说302、308)这些，和重定向有关的状态码</p><h3 id="路由的返回值"><a href="#路由的返回值" class="headerlink" title="路由的返回值"></a>路由的返回值</h3><p> return的那些字符串都是进入了Respone中，Response（“返回的字符串”）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>这个return  ‘Hello World!’</p><p>等价于 return Response (‘Hello World!’)</p><p>这个Respone中的参数就是web中response中的一些参数</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210605203610.png"></p><p>return 的返回值可以是元组，在这个情况下后面的跟着的可以是响应码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span>,<span class="number">404</span></span><br></pre></td></tr></table></figure><p>那这个页面就会直接变成404的样子，也就是在响应报文中有个404了</p><h3 id="关于make-response"><a href="#关于make-response" class="headerlink" title="关于make_response"></a>关于make_response</h3><p>这个话题我还不知道放在哪里我就直接放在这个路由版块了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = make_response(<span class="string">&quot;这是一个文本&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个创建了一个response对象，在视图函数里面就可以直接返回这个对象，这就是一个响应对象 </p><p>还可以通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.headers[<span class="string">&quot;aaa&quot;</span>]=<span class="string">&quot;fff&quot;</span></span><br></pre></td></tr></table></figure><p>来在响应头里加一个参数</p><h3 id="response和request对象"><a href="#response和request对象" class="headerlink" title="response和request对象"></a>response和request对象</h3><p>上面那个应该是就response对象的用法但我不想改顺序了</p><p>那这里就讲request</p><p>直接在flask里面导入进来就好了（原来import里真的可以直接导对象啊）</p><p>request可以直接调用其中的变量</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>render_template(“xxx.html”)</p><p>这个方法是flask自带的，一直就有</p><p>里面的xxx.html是指在templates文件夹里面的名字</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210605203630.png"></p><h3 id="对于HTML里面有from表单的情况"><a href="#对于HTML里面有from表单的情况" class="headerlink" title="对于HTML里面有from表单的情况"></a>对于HTML里面有from表单的情况</h3><p>这个form表单里面的action属性</p><p>表示了提交以后要进入的路径</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">&quot;/xxx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个name属性很重要，是你用来传参的地方</p><p>你可以通过request.args.get(‘username’)</p><p>直接吧你输入的值拿到 </p><p>而对于post方法</p><p>你首先要这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br></pre></td></tr></table></figure><p>然后使用request.form.get(‘username’)</p><p>这样才可以</p><h3 id="补充：json"><a href="#补充：json" class="headerlink" title="补充：json"></a>补充：json</h3><p>这是个关于json用法的补充</p><p>json我之前一直没怎么学好</p><p>json是一个字符串格式，应该是属于字符串那个范围</p><p>在python中，列表变成json格式字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json_str = json.dumps(列表变量名)</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>重定向有个状态码302</p><p>302表示就是重定向，表示浏览器接收到了302，发现自己应该转一个地址，就直接转过去了，此时浏览器还要在发一个请求给服务器，表示我再要一个给之前重定向的那个url，请给我这个url的响应</p><p>在flask中，这个重定向是直接有一个redirect函数可以来使用，应该也是在flask里面自己就有的，都不需要换什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(<span class="string">&quot;要换的地址&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210605203700.png">        而redirect常常和url_for搭配起来使用</p><p>url_for 感觉也就是给一个很长的路径弄一个比较好记的小名</p><p>它也是一个flask自带的函数，可以直接用</p><p>用法是首先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;小名&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><p>然后在你想用的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;小名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>就好了</p><h3 id="模板的参数投递"><a href="#模板的参数投递" class="headerlink" title="模板的参数投递"></a>模板的参数投递</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template(<span class="string">&quot;你的HTML&quot;</span>，变量名= flask里面弄的变量名)</span><br></pre></td></tr></table></figure><p>在html里面就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量名&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个变量如果在flask里面没有就是空白字符串</p><p>这个我学过了所以不多讲了</p><p><strong>这里面的语法对于python的所有语法都适用</strong></p><p>顺便一说这些都是先在render_template里面，也就是jinjia2这个模板引擎里面进行了渲染，然后才开始return到浏览器的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对列表：</span><br><span class="line">&#123;&#123;list.0&#125;&#125;或者&#123;&#123;list[0]&#125;&#125;</span><br><span class="line">字典：</span><br><span class="line">&#123;&#123;dic.item&#125;&#125;</span><br><span class="line">对象：</span><br><span class="line">&#123;&#123;对象.属性&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><p>循环的语句块：</p><p>if的语句块：</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器就是一个函数，不过是在模板里定义的自带的函数，</p><p>用法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量名 | 过滤器（参数）&#125;&#125;</span><br></pre></td></tr></table></figure><p>参数可以有也可以没有</p><p>常用的过滤器：</p><p>safe、capitalize、upper、reverse、format、truncate</p><p>有字典的也有list的各种方法，基本上和python里面都差不多</p><p>在语句块里面也差不多，语句块里面可以直接使用方法    </p><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><p>方法一：</p><p>app.add_template_filter(在app.py里面的函数名，“你想要使用时候用的名字”)</p><p>方法二：</p><p>使用装饰器，在这个定义的函数前面写一个</p><p>@app.template_filter(“你想要它叫的名字”)</p><h3 id="模板复用"><a href="#模板复用" class="headerlink" title="模板复用"></a>模板复用</h3><h4 id="模块继承"><a href="#模块继承" class="headerlink" title="模块继承"></a>模块继承</h4><p>要用一个语句块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block 名字 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>就是说这几个都是这个HTML里面可以改的地方</p><p>然后开始继承</p><p>在子模板里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends ’index.html&#39; %&#125;</span><br></pre></td></tr></table></figure><p>这个index.html是你想要继承的那个html</p><p>然后你现在改的也就只有父本里面的那些block的地方</p><p>然后这个时候要注意是写的那个自己的名字</p><p>也就是说在子模板里面是只有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block 名字 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>的形式的</p><h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><p>这是一个include</p><p>格式是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#x27;文件夹/xxx.html&#x27;%&#125;</span><br></pre></td></tr></table></figure><p>这个方法适用于在A,B,C中有一些共同的部分，但其他页面没有这个部分</p><p>所以A,B,C里面直接include就好了</p><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><p>宏有点像是python里面的函数，它的格式是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro 函数名(变量)%&#125;</span><br><span class="line">。。。</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>这个我感觉和include也有那么一点像</p><p>也就是说我可以把这个macro也就是这个像函数一样的东西放在一个HTML文件里面，然后在其他文件里面引用它，格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &#x27;文件路径名&#x27; as 别名 %&#125;</span><br><span class="line">&#123;&#123; 别名.方法(参数) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="引用static文件夹中的文件"><a href="#引用static文件夹中的文件" class="headerlink" title="引用static文件夹中的文件"></a>引用static文件夹中的文件</h3><p>这涉及到要使用url_for</p><p>我们可以知道之前说url_for是为了方便写各种各样的很长的路由，但是url_for还有其他用法</p><p>比如说在要引入css文件的时候，我们使用url_for</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;static&#x27;,filename = &#x27;css/style.css&#x27;)&#125;&#125;&quot;</span></span></span><br></pre></td></tr></table></figure><p>这个是在flask里面的一个默认规定，它表示直接引用了static文件夹里面的css文件夹中的style.css</p><p>它将static作为了url_for里面的一个特殊条件，这个条件后面必须要有filename, 将’css/style.css’变成非关键参数，使得关键参数只有‘static’这一个</p><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>认识蓝图之前，我们首先要理清楚视图是个什么</p><p>视图就是在flask里面那些之前和路由联系在一起的函数，它们把路由连接起来返回数据传给浏览器</p><h3 id="蓝图是什么"><a href="#蓝图是什么" class="headerlink" title="蓝图是什么"></a>蓝图是什么</h3><p>蓝图是指将一些视图按照一些分类规矩分成的一个块</p><p>也就是说原本乱七八糟的视图函数们，在这里变成了稍微可以归类的一个个版块，里面有着一个个视图</p><p>蓝图对象连接着一些在一个主题里面的路由</p><p>通过蓝图对象注册在app对像来使得app对象中可以识别这些路由</p><h4 id="蓝图中的Flask-name"><a href="#蓝图中的Flask-name" class="headerlink" title="蓝图中的Flask(_ name _)"></a>蓝图中的Flask(_ <em>name</em> _)</h4><p>这个类的构造方法是把templates和static的路径设定好的，所以如果你是在做项目，需要把这个路径改一改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">蓝图对象名称 = Flask(__name__,template_folder=<span class="string">&#x27;要改的路径&#x27;</span>,static_folder = <span class="string">&#x27;要改的路径&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="项目中的关于表的删除操作"><a href="#项目中的关于表的删除操作" class="headerlink" title="项目中的关于表的删除操作"></a>项目中的关于表的删除操作</h3><p>通过js代码可以进行删除</p><p>js中location对象 location.href=’替换的一个路由’，还可以把参数用get方法的形式放在里面</p><p>这就进入了一个新的视图函数，这样就可以在那个视图函数里面进行表的删减</p><h2 id="flask-script"><a href="#flask-script" class="headerlink" title="flask-script"></a>flask-script</h2><p>这个是用来和数据库做关系的一个模块</p><p>居然只能和flask1.1.2作一起使用，看来这个也是一件很老的东西了，唉，将就用吧</p><p>命令行中运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py runserver</span><br></pre></td></tr></table></figure><p> 这个命令行部分还可以自定义命令</p><p>在一个函数上面加上装饰器</p><p>@manager.command</p><p>就好了</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>所谓ORM，指的是将数据库和类联系起来的一种映射关系</p><p>这个关系是</p><p>类&lt;———&gt;字段名</p><p>对象&lt;———-&gt;一条数据</p><p>将这个映射关系的使用，这就是ORM的作用</p><h3 id="在flask中与之相关的库"><a href="#在flask中与之相关的库" class="headerlink" title="在flask中与之相关的库"></a>在flask中与之相关的库</h3><h4 id="SQLALchemy"><a href="#SQLALchemy" class="headerlink" title="SQLALchemy"></a>SQLALchemy</h4><p>这个是一个关于实现我们所谓ORM关系的库，是基础</p><h4 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h4><p>这是基于SQLAlchemy的一个库，由于SQLAlchemy的复杂性，flask中将其做了一步简化，使其比较方便</p><h4 id="flask-migrate"><a href="#flask-migrate" class="headerlink" title="flask-migrate"></a>flask-migrate</h4><p>用于实现ORM映射的命令</p><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>中间有一个和数据库进行连接的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI=<span class="string">&#x27;mysql+pymysql://user:password@hostip:port/db_name&#x27;</span></span><br></pre></td></tr></table></figure><p>这里面的都是概念名字，用到了自己记得换</p><h3 id="app和ORM"><a href="#app和ORM" class="headerlink" title="app和ORM"></a>app和ORM</h3><h4 id="app和SQLAlchemy关联"><a href="#app和SQLAlchemy关联" class="headerlink" title="app和SQLAlchemy关联"></a>app和SQLAlchemy关联</h4><p>这两个是需要关联的东西，app对象和db=SQLAlchemy()对象进行关联：</p><p>db是在ext文件夹中实现</p><p>然后在apps的_ <em>init</em> _.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>():</span></span><br><span class="line">    app = Flask(__name__,template_folder=<span class="string">&#x27;../templates&#x27;</span>,static_folder=<span class="string">&#x27;../static&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    app.config.from_object(settings.DevelopmentConfig)</span><br><span class="line">    db.init_app(app) <span class="comment">#进行的绑定</span></span><br><span class="line">  </span><br><span class="line">    app.register_blueprint(user_bp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意其中的顺序问题，一定要是先配置了文件，然后在对db进行和app的连接</p><h4 id="app和flask-migrate"><a href="#app和flask-migrate" class="headerlink" title="app和flask-migrate"></a>app和flask-migrate</h4><p>migrate对象是和app和db对象都产生关联了</p><p>（flask-migrate要是2.5.3版本才能弄MigrateCommand太离谱了）</p><p>在app.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">migrate = Migrate(app=app,db=db)</span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>model模型，也就是类，在model.py中</p><p>也就是是和表相对应的那个类，大概的格式是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line"> <span class="built_in">id</span> = db.column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement = <span class="literal">True</span>)</span><br><span class="line">    username = db.column(db.String(<span class="number">15</span>), nullable = <span class="literal">False</span>)</span><br><span class="line">    password = db.column(db.String(<span class="number">12</span>), nullabe = <span class="literal">True</span>)</span><br><span class="line">    phone = db.column(db.String(<span class="number">11</span>), unique = <span class="literal">True</span>)</span><br><span class="line">    rdatetime = db.column(db.DateTime, default = datetime.now)</span><br></pre></td></tr></table></figure><p>使用命令：</p><ol><li>记得创建了模型以后要导入模型</li><li>在终端使用命令db init</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py db init</span><br></pre></td></tr></table></figure><p>会生成一个migration文件夹</p><p>再弄一个命令 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py db migrate</span><br></pre></td></tr></table></figure><p>要记得先把数据库打开啊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py db upgrade</span><br></pre></td></tr></table></figure><p>顺便一说这样确定了之后如果只是对这个表的增删改查好像就已经可以不用打开数据库了</p><h4 id="db对象的一些方法"><a href="#db对象的一些方法" class="headerlink" title="db对象的一些方法"></a>db对象的一些方法</h4><p>db.session.add(模型)  添加一个模型进db对象的缓存里面（感觉是这个意思）</p><p>db.session.commit()   提交这个缓存</p><h4 id="关于对数据库的操作"><a href="#关于对数据库的操作" class="headerlink" title="关于对数据库的操作"></a>关于对数据库的操作</h4><p>对数据库的操作在flask里面就是对model类的对象和db对象的一些操作</p><p>我们数据库的创建是用了上面的upgrade命令</p><p>插入和查询操作就是直接</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.session.add()</span><br><span class="line">db.session.commit() <span class="comment">#添加行数据和提交</span></span><br><span class="line"></span><br><span class="line">User.query.<span class="built_in">all</span>()  <span class="comment">#查找这个表的所有</span></span><br><span class="line">User.query.filer_by(表中的参数名 = 函数中的参数名) <span class="comment">#查找你想要的行，返回的是一个列表，可以说这个列表里面都是一个个数据对象</span></span><br><span class="line">User.query.get(<span class="number">1</span>) <span class="comment">#按照主键来查询 返回一个用户对象</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.qurey.<span class="built_in">filter</span>(User.username == <span class="string">&quot;想要查的变量&quot;</span>).<span class="built_in">all</span>() <span class="comment">#返回的是一个列表，列表里面是对象</span></span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.startswith(<span class="string">&#x27;z&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.endswith(<span class="string">&#x27;z&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.contains(<span class="string">&#x27;z&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.like(<span class="string">&#x27;z%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(or_(User.username.startwith(<span class="string">&#x27;z&#x27;</span>),User.username.startwith(<span class="string">&#x27;z&#x27;</span>))).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(and_(User.username.like(<span class="string">&#x27;z%&#x27;</span>),User.<span class="built_in">id</span>.__gt__(<span class="string">&#x27;2&#x27;</span>))).<span class="built_in">all</span>() <span class="comment"># id&gt;2 and username like &#x27;z% &#x27; 这个也可以直接用&gt; 和 &lt; 号的</span></span><br></pre></td></tr></table></figure><p>or_ 和and_ 都是要import的</p><p>排序：order_by</p><pre><code>user_list = User.query.filter(User.username.contains(&#39;z&#39;)).order_by(-User.rdatetime).all()  # 先筛选再排序user_list = User.query.order_by(-User.id).all()  对所有的进行排序注意：order_by(参数)：1。 直接是字符串： &#39;字段名&#39;  但是不能倒序2。 填字段名： 模型.字段    order_by(-模型.字段)  倒序</code></pre><p>限制： limit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">limit的使用 + offset</span><br><span class="line">user_list &#x3D; User.query.limit(2).all()   默认获取前两条</span><br><span class="line">user_list &#x3D; User.query.offset(2).limit(2).all()   跳过2条记录再获取两条记录</span><br></pre></td></tr></table></figure><h2 id="关于直接在前端对后端数据库的操作"><a href="#关于直接在前端对后端数据库的操作" class="headerlink" title="关于直接在前端对后端数据库的操作"></a>关于直接在前端对后端数据库的操作</h2><p>通过对标签的修改加上js的辅助，用JavaScript来使其进入另一个路由，在这个理由里面定义视图函数，用这个函数的返回值来表示响应</p><h2 id="表与表之间的关联"><a href="#表与表之间的关联" class="headerlink" title="表与表之间的关联"></a>表与表之间的关联</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">uer_id =  db.Column(db.Integer,db.ForeignKey(<span class="string">&#x27;user.id&#x27;</span>),nullable = Flase)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    articles = db.relationship(<span class="string">&#x27;Article&#x27;</span>,backref=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>上面这个是一对多关系的时候需要用。表示一个user对应多个article</p><p>如果是多对多的关系的话，要注意：要弄一个第三方的表，这个表来方便将两张多对多关系的表实现连接</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flask&quot;&gt;&lt;a href=&quot;#flask&quot; class=&quot;headerlink&quot; title=&quot;flask&quot;&gt;&lt;/a&gt;flask&lt;/h1&gt;&lt;p&gt;这个是关于我们要做的项目的学习&lt;/p&gt;
&lt;p&gt;我们用了flask框架&lt;/p&gt;
&lt;h2 id=&quot;虚拟环境&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="flask" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/flask/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="flask" scheme="https://thanyi.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言的学习</title>
    <link href="https://thanyi.github.io/2021/05/25/008%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://thanyi.github.io/2021/05/25/008%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2021-05-25T14:30:35.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="算数平移和逻辑平移"><a href="#算数平移和逻辑平移" class="headerlink" title="算数平移和逻辑平移"></a>算数平移和逻辑平移</h2><p>关于这个平移问题，分为算术左右移和逻辑左右移</p><h3 id="算术左移和逻辑左移："><a href="#算术左移和逻辑左移：" class="headerlink" title="算术左移和逻辑左移："></a>算术左移和逻辑左移：</h3><p>只要数字向左移动一位就好了，然后右边补0，其他都不用管</p><h3 id="算术右移和逻辑右移："><a href="#算术右移和逻辑右移：" class="headerlink" title="算术右移和逻辑右移："></a>算术右移和逻辑右移：</h3><p>逻辑右移是很正常的，也就是只要向右移动，补补0就好了</p><p><strong>而算术右移就不一样！</strong></p><p>只有算术右移，是让符号位一起走</p><ul><li>向右移动，并且补的是和符号位是一样的</li></ul><p>也就是说要不是全补0要不是全补1</p><h2 id="IEEE浮点数编码"><a href="#IEEE浮点数编码" class="headerlink" title="IEEE浮点数编码"></a>IEEE浮点数编码</h2><p>首先你要知道怎么是一个小数的十进制变二进制</p><p>但我觉得我已经知道了我就不讲了</p><h3 id="32位编码格式"><a href="#32位编码格式" class="headerlink" title="32位编码格式"></a>32位编码格式</h3><p>对于一个32位的浮点数，它的编码格式</p><p>在32位二进制串中，阶码部分用8位来存储，尾数部分用23位来存储，还有1位是符号位。</p><p>讲起来有点麻烦我直接上例子</p><p>例：12.25按照32位IEEE编码</p><ul><li>符号位</li></ul><p>12.25变成二进制：1100.01</p><p>因为是正数，符号位是0</p><ul><li>阶码</li></ul><p>阶码部分是这样的：</p><p>因为是1100.01，按照规则这是<br>$$<br>1.10001*2^3<br>$$<br>所以我们知道阶码数是127+3=130 （这是规定我也不知道为什么是这样）</p><p>130再变为二进制为：10000011</p><p>阶码也是8位，这个就是阶码</p><ul><li>尾数部分</li></ul><p>尾数是我们之前的<br>$$<br>1.10001*2^3<br>$$<br>中的小数点后面的部分：10001</p><p>又因为是 23位的尾数部分</p><p>所以是10001000000000000000000（共23位）</p><p>所以这个数是</p><p>0 10000011 10001000000000000000000</p><h3 id="32位编码格式-1"><a href="#32位编码格式-1" class="headerlink" title="32位编码格式"></a>32位编码格式</h3><p>64位的阶码是+1023</p><p>64位的编码部分是</p><p>1         11         52</p><h2 id="关于一个字节为什么是-128到127"><a href="#关于一个字节为什么是-128到127" class="headerlink" title="关于一个字节为什么是 -128到127"></a>关于一个字节为什么是 -128到127</h2><p>补码的好处：</p><p>首先加入没有补码，+0 在计算机中的表示0 000 0000. -0 在计算机中的表示1 000 0000. 并不一致。</p><p>如果采用补码-0 的补码就是 0 000 0000. 两者一致</p><p>其次我们知道8位二进制的表示形式总共有0000 0000-1111 1111 那么多，恰好是2^8=256. 也就是说理论上可以表示256个十进制数字。我们前面知道，-0 在计算机中如果再用原码 就是1 000 0000 。如果采用反码就是1 111 1111. 会多占用一个表达。</p><p>所以如果采用补码就可以把1 000 0000 这个表达空出来表示一个十进制数字。 很显然用它来表示-128 最为合理。</p><p>还可以从另外一个角度来理解： -127 的补码是1000 0001.再减去1 就是1000 0000 。那-127-1=-128.</p><p>所以补码的好处就是计算机的表达位数可以充分利用表示跟多的十进制数。</p><h2 id="关于汇编指令"><a href="#关于汇编指令" class="headerlink" title="关于汇编指令"></a>关于汇编指令</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>要学指令首先要弄懂这些寄存器</p><p>8086/8088 CPU的寄存器共有14个，都是16位的寄存器，根据用途分为<strong>数据寄存器</strong>、<strong>段寄存器</strong>、<strong>地址寄存器</strong>和<strong>控制寄存器</strong>4种类型。</p><p>不过太多了，我挑几个重要的讲：</p><ul><li>数据寄存器</li></ul><p>数据寄存器包括EAX、EBX、ECX 、EDX四个通用寄存器，用于存放计算过程中所用的操作数、结果等信息，即是存放数据的寄存器。</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210525115616.png"></p><ul><li><p>指针寄存器</p><p>这个就是指向的一些东西的寄存器</p><p>ESI：源变址寄存器，可用于存放源缓冲区的偏移地址。<br>EDI：目的变址寄存器，可用于存放目的缓冲区的偏移地址。<br>ESP：堆栈指针寄存器，用于指出堆栈区栈顶的偏移地址。<br>EBP：基址指针寄存器，用于指出堆栈区某个单元的偏移地址。</p></li><li><p>控制寄存器</p></li></ul><p>控制寄存器包括指令指针寄存器IP和标志寄存器FR，用来控制程序的执行。</p><ol><li><p>指令指针寄存器IP（Instruction Pointer）<br>指出当前正在执行指令的<strong>下一条指令</strong>所在单元的偏移地址。</p></li><li><p>标志寄存器FR（Flag Register）<br>标志寄存器FR共有有效标志位9个。</p><p>下面这些了解就好了</p><p><strong>状态标志：</strong></p><p>C：最高位产生借位或进位标志。进位C=1</p><p>O：溢出标志。溢出O=1</p><p>Z：零标志。结果为0则Z=1</p><p>S：符号标志。就是结果的符号位。</p><p>P：奇偶标志。低8位中1的个数为偶数P=1</p><p>A：辅助进位标志。低半字节向高半字节有进位或借位，A=1</p><p><strong>控制标志：</strong></p><p>D：方向标志。D=1时串操作时自动减量</p><p>I：中断标志。I=1时允许CPU接收外部的中断请求</p><p>T：陷阱标志。T=1时进入单步调试状态。</p></li></ol><h2 id="指令部分"><a href="#指令部分" class="headerlink" title="指令部分"></a>指令部分</h2><p>某些指令的差别就在会不会影响标志位或者会不会保存结果</p><h3 id="关于有些不好记的指令"><a href="#关于有些不好记的指令" class="headerlink" title="关于有些不好记的指令"></a>关于有些不好记的指令</h3><p>SHL（shift logical left）: 逻辑左移<br>        SAL  (shift arithmetic left )：算术左移<br>        SHR  (shift logical right)：逻辑右移<br>        SAR  (shift arithmetic right)：算术右移</p><p>ROL  (rotate left)：循环左移<br>        ROR  (rotate right)：循环右移<br>        RCL  (rotate left through carry)：带进位循环左移<br>        RCR  (rotate right through carry) ：带进位循环右移</p><h3 id="影响标志位"><a href="#影响标志位" class="headerlink" title="影响标志位"></a>影响标志位</h3><p>add和lec</p><p>sub和dec</p><p>这两个是前者影响标志位，后者不影响</p><h3 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h3><p>test和add</p><p>cmp和sub</p><p>前者保存数据，后者不保存</p><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p>是寻<strong>操作数</strong>的地址的方式</p><p>立即数寻址、寄存器寻址、存储器寻址</p><p>寄存器寻址：直接弄出来了寄存器中的数值，比如eax直接是指eax里面的数</p><p>存储器寻址：有直接、间接、基址</p><p>储存器寻址中：直接就是直接拿地址过来：[1000H]这种</p><p>间接： [eax] 也就是说要的不是eax中的值，要的是eax中这个表示了地址，再向内存中找这个地址</p><p>基址：[eax+1000H]这种，也就是把两种结合</p><h3 id="关于汇编语言的条件判断"><a href="#关于汇编语言的条件判断" class="headerlink" title="关于汇编语言的条件判断"></a>关于汇编语言的条件判断</h3><p>C语言条件跳转中<code>a&lt;b</code>对应的汇编的汇编代码是</p><p>mov eax, [a]; </p><p>cmp eax, [b];  //先比较a和b</p><p>jge XXX;  //如果a&gt;=b就跳到什么地方去</p><p>因为汇编和C语言好像是翻译上的不一样</p><p>在C语言中如果是a&gt;b</p><p>那么在汇编语言中就是a&lt;=b    </p><p>顺便一说，这个跳转指令自己就是个条件跳转，根据的是标志位的变动</p><p>A&gt;B：JG         （JNLE）<br>        A≥B：JGE       （JNL）<br>        A&lt;B：JL          （JNGE）<br>        A≤B：JLE        （JNG）</p><h2 id="函数的形成和原理"><a href="#函数的形成和原理" class="headerlink" title="函数的形成和原理"></a>函数的形成和原理</h2><h3 id="函数的一些小知识"><a href="#函数的一些小知识" class="headerlink" title="函数的一些小知识"></a>函数的一些小知识</h3><ul><li><p>函数参数的传递顺序：</p><p>从右往左传递参数</p></li><li><p>不可以指令的两边都是要访问内存的变量</p></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈在内存里面，并且这个数据的在地址中的顺序是从大到小这个方向在存储</p><p>从栈底到栈顶是逐渐变小的过程</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210525115634.png"></p><ul><li><p>函数开辟栈的指令:  push ebp ; </p><p>​                                  mov ebp,esp;</p></li><li><p>关闭栈的指令： mov esp,ebp; </p><p>​                            pop ebp; </p></li><li><p>call指令：先把这个call指令的下一个指令入栈，然后再跳转到call指令这个指令的里面的那个指令里面</p></li></ul><h4 id="调用栈的步骤"><a href="#调用栈的步骤" class="headerlink" title="调用栈的步骤"></a>调用栈的步骤</h4><ol><li>开辟栈，注意每个栈的ebp都代表的是上一个栈的东西，有点像是在保存前任的东西</li><li>把栈的大小决定，然后再压入ebx，esi、edi</li><li>开始初始化栈，把栈里面全部的储存空间都变成一模一样的数字</li><li>把变量弄进栈，在edi的后面</li><li>当要调用函数的时候，call函数把eip的值入栈，放在edi后面(或者是在变量后面)</li><li>函数重新开一个栈，又是把main函数的ebp先存起来</li><li>ret相当于 pop eip，把eip有弄回正道</li><li>最后栈平衡，目前来说就是有几个变量esp就往回加几个</li></ol><h4 id="栈平衡："><a href="#栈平衡：" class="headerlink" title="栈平衡："></a><strong>栈平衡</strong>：</h4><p>不同的两次函数调用，所形成的栈帧也不相同。当由一个函数进入到另一个函数中时，就会针对调用的函数开辟出其所需的栈空间，形成此函数的栈。</p><p>当这个函数结束调用时需要清除掉它所使用的栈空间，关闭栈帧，我们把这一过程称为栈平衡。</p><h4 id="对于函数调用，有三种不同的调用方式"><a href="#对于函数调用，有三种不同的调用方式" class="headerlink" title="对于函数调用，有三种不同的调用方式"></a>对于函数调用，有三种不同的调用方式</h4><p>stdcall、cdecl、fastcall，这三个东西主要的区别在，是哪个部分实现的栈平衡</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210525223018.png"></p><p><strong>只有cdecl 可以弄不定参数的函数</strong>，并且也只有它是由调用方，也就是说是call那个函数的那边来平衡栈，其他的都是要函数这边来平衡</p><p><strong>fastcall使用寄存器来传参</strong></p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>函数的返回值一般是在寄存器eax上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h1&gt;&lt;h2 id=&quot;算数平移和逻辑平移&quot;&gt;&lt;a href=&quot;#算数平移和逻辑平移&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="汇编语言" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="https://thanyi.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="知识" scheme="https://thanyi.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>关于win系统中powershell的美化</title>
    <link href="https://thanyi.github.io/2021/04/30/007%E5%85%B3%E4%BA%8Epowershell/"/>
    <id>https://thanyi.github.io/2021/04/30/007%E5%85%B3%E4%BA%8Epowershell/</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2021-04-30T15:48:07.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  在花猪的带领下，学会了关于我电脑的powershell的美化，太香了</p><h1 id="特别感谢博客"><a href="#特别感谢博客" class="headerlink" title="特别感谢博客"></a>特别感谢博客</h1><p><a href="https://akilar.top/posts/8a76eb87/">https://akilar.top/posts/8a76eb87/</a></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>我觉得上文的那个文章里面写的很好了我就不写了</p><h1 id="有些bug的更改"><a href="#有些bug的更改" class="headerlink" title="有些bug的更改"></a>有些bug的更改</h1><p>你在按照教程</p><p>在powershell上使用命令打开.ps1文件的时候，输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure><p>命令”Set-Theme Agnoster”是旧版本的命令（这个版本是oh-my-posh的版本），对于新版本，也就是V3版本的oh-my-posh来说</p><p>命令应该是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-PoshPrompt</span> <span class="literal">-Theme</span> agnoster</span><br></pre></td></tr></table></figure><p>然后问题就解决了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  在花猪的带领下，学会了关于我电脑的powershell的美化，太香了&lt;/p&gt;
&lt;h1 id=&quot;特别感谢博客&quot;&gt;&lt;a href=&quot;#特别感</summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="powershell" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/powershell/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="https://thanyi.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>(pip)关于代理安装问题</title>
    <link href="https://thanyi.github.io/2021/04/12/006%E5%85%B3%E4%BA%8Epip/"/>
    <id>https://thanyi.github.io/2021/04/12/006%E5%85%B3%E4%BA%8Epip/</id>
    <published>2021-04-11T16:00:00.000Z</published>
    <updated>2021-08-04T14:19:31.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  研究同学的项目，想要通过pip下载导入包的时候，出现了错误</p><h1 id="Failed-to-establish-a-new-connection-WinError-10061-由于目标计算机积极拒绝，无法连接。’-’-simple-flask-migrate"><a href="#Failed-to-establish-a-new-connection-WinError-10061-由于目标计算机积极拒绝，无法连接。’-’-simple-flask-migrate" class="headerlink" title="Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。’))’: /simple/flask-migrate/"></a>Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。’))’: /simple/flask-migrate/</h1><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412201816.png"></p><p>在网上一番搜索了之后，发现是显示无法连接到代理的问题</p><p>解决方法也很简单：通过修改注册表中的代理设置</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>快捷键【win】+【R】输入regedit 打开注册表编辑器</p><p>打开【HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings】路径</p><p>选择关于代理的设置：【ProxyEnable】设置变为【0】</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412202407.png"></p><p>再使用pip的时候，就发现已经没问题了</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210412202551.png"></p><p>参考链接：<a href="https://blog.csdn.net/m0_37811192/article/details/89411415">https://blog.csdn.net/m0_37811192/article/details/89411415</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  研究同学的项目，想要通过pip下载导入包的时候，出现了错误&lt;/p&gt;
&lt;h1 id=&quot;Failed-to-establish-a-new-</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="pip" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/pip/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="https://thanyi.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>关于npm的一些安装问题</title>
    <link href="https://thanyi.github.io/2021/03/22/005%E5%85%B3%E4%BA%8Enpm/"/>
    <id>https://thanyi.github.io/2021/03/22/005%E5%85%B3%E4%BA%8Enpm/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-22T17:23:37.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>换了一台电脑后，关于nodejs，每次弄npm安装插件都有一大堆报错和warning，这里稍微整理一下，方便以后使用npm</p><h1 id="“npm-WARN-requires-a-peer-of-XXX“问题"><a href="#“npm-WARN-requires-a-peer-of-XXX“问题" class="headerlink" title="“npm WARN requires a peer of XXX“问题"></a>“npm WARN requires a peer of XXX“问题</h1><p> 在NodeJs开发中，往往需要安装各种依赖包，而有时候这些依赖包版本更新了或者改成了另外一个包名，导致npm install会报“requires a peer of XXX”之类的warning。</p><p>我这次下载artitalk插件就是这个问题</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210322235444.png"></p><p>解决方法，就是缺啥就补啥，命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &quot;XXX&quot;</span><br></pre></td></tr></table></figure><p>其中“xxx”是你所缺少的模块，比如对于我这次缺少的模块，我的命令就为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &quot;typescript@&gt;=<span class="number">2</span>.<span class="number">7</span>&quot;</span><br></pre></td></tr></table></figure><p>安装后就不会报错了</p><h1 id="npm-WARN-saveError-ENOENT-no-such-file-or-directory-open-‘C-Users-package-json’问题"><a href="#npm-WARN-saveError-ENOENT-no-such-file-or-directory-open-‘C-Users-package-json’问题" class="headerlink" title="npm WARN saveError ENOENT: no such file or directory, open ‘C:\Users...\package.json’问题"></a>npm WARN saveError ENOENT: no such file or directory, open ‘C:\Users...\package.json’问题</h1><p>根据错误提示，这个问题主要是缺少”package.json”文件所导致的，这个文件的作用是管理你本地安装的npm包</p><p>解决的方法，创建”package.json”文件，使用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>系统会给你提示来让你输入相关的配置，便于你自己配置，但对一些新手（比如我）来说，这样过于复杂，也怕自己改错什么配置</p><p>所以还可以使用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>它可以一次性将所有默认配置都写入文件，直接创建”package.json”文件，还挺方便的，使用如下</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323001342.png"></p><h1 id="npm-warn-package-json-1-0-0-no-repository-field问题"><a href="#npm-warn-package-json-1-0-0-no-repository-field问题" class="headerlink" title="npm warn package.json @1.0.0 no repository field问题"></a>npm warn package.json @1.0.0 no repository field问题</h1><p>npm安装时总是报这个错，但是其实是安装成功的</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323004816.png"></p><p>看问题可以知道应该是package.json里缺少 repository的问题，所以我们添加上就ok了</p><p>有大佬说这里是缺少项目的仓库字段，如下这种：</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http://baidu.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>但如果只是练习自己用的话，只需要在package.json里做下面的配置就好了</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;private&quot;: true,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>这样就是把项目设置为私有来避开warning</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210323010224.png"></p><p>同理，npm WARN <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#46;&#x30;&#46;&#48;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#46;&#x30;&#46;&#48;</a> No description也只需把description的值不为空就行了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本文持续更新中……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;换了一台电脑后，关于nodejs，每次弄npm安装插件都有一大堆报错和warning，这里稍微整理一下，方便以后使用npm&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="npm" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/npm/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="npm" scheme="https://thanyi.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>关于安装burp suite抓包工具</title>
    <link href="https://thanyi.github.io/2021/03/18/004%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    <id>https://thanyi.github.io/2021/03/18/004%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</id>
    <published>2021-03-17T16:00:00.000Z</published>
    <updated>2021-03-18T16:37:37.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于一些原因换了台电脑，之前的抓包工具也没有了，所以想要重新下载burp suite来进行抓包测试</p><p>以下的教程很大部分参考了<a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a> 的内容，只是针对我自己的一些问题进行了阐述，并且总结了一些东西</p><h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a> 中有着百度云链接，里面有着java的jdk8版本，以及破解的burp软件</p><p>注1：因为burp suite的底层是用java程序编写，所以burp软件只能在java的环境里面运行，因此需要先搭建java环境</p><p>注2：对于上方的资源而言，如果jdk过于新( 比如说是jdk15)，那会导致有些操作无法执行而根本没办法运行burp suite</p><h1 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h1><p>主要涉及了jdk和jre的安装以及环境变量的配置</p><h2 id="jdk-8u201-windows-x64安装"><a href="#jdk-8u201-windows-x64安装" class="headerlink" title="jdk-8u201-windows-x64安装"></a>jdk-8u201-windows-x64安装</h2><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545%E4%B8%AD%E5%BE%88%E8%AF%A6%E7%BB%86">https://blog.csdn.net/LUOBIKUN/article/details/87457545中很详细</a></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>按下win键搜索“编辑系统环境变量”</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210318233610723.png"></p><p>点击环境变量，进入界面</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/QQ%E6%88%AA%E5%9B%BE20210318233846.png"></p><p>如我图所示，</p><blockquote><p>①在“系统变量”中创建“JAVA_HOME”，值为java的jdk安装的路径</p><p>②在path变量里书写%JAVA_HOME%\bin 和 %JAVA_HOME%\jre\bin</p><p>当然这个也要具体看你的jdk和jre的路径，比如我的jre是在jdk里面，如果你的你的jdk和jre是在同一个目录下，那就是直接弄绝对路径也可以</p><p>③在“系统变量”中创建“CLASSPATH”，变量值填写 “.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar”</p></blockquote><h1 id="安装burp-suite"><a href="#安装burp-suite" class="headerlink" title="安装burp suite"></a>安装burp suite</h1><p>在下载好的压缩包里面有burp-loader-keygen.jar，将其打开后按照<a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545%E7%9A%84%E6%95%99%E7%A8%8B%E8%B5%B0%E5%B0%B1%E8%A1%8C%E4%BA%86">https://blog.csdn.net/LUOBIKUN/article/details/87457545的教程走就行了</a></p><p>并且下载出来的是汉化版本</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210318235702.png"></p><h1 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h1><p>我是直接用的Firefox浏览器，比较方便设置代理和导入证书</p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>在设置代理之前，要先记得在burp suite的界面中先把默认代理的接口勾上(我这里因为8080接口被占用了所以换了一个接口)</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000945.png"></p><p>然后打开firefox的设置界面(选项界面)，搜索“网络设置”，打开</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000112.png"></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319000200.png"></p><p>此时完成了代理，此时已经可以尝试着抓包了</p><h2 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h2><p>我们在第一次抓包的时候总是会遇到『您的连接不是私密连接』（Chrome）、『此网站的安全证书存在问题』（IE）或者『您的连接不安全』（Firefox）的问题</p><p>对于这种解决方式，就是导入证书，原理我暂时也不是很懂，之后学懂的话我再在这个地方进行解释吧</p><p>导入证书步骤：</p><p>​    1）先开启burp suite的代理服务器并在浏览器里打开代理，访问<a href="http://burp,此时会出现一个和burp相关的界面,点击右上角/">http://burp，此时会出现一个和burp相关的界面，点击右上角</a></p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319001616.png"></p><p>此时会提醒你下载证书，下载即可</p><p>​    2）导入证书，在Firefox的设置界面搜索“证书”，点击“导入”</p><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319002000.png"></p><p>跳出的界面<img src="https://cdn.jsdelivr.net/gh/thanyi/image/20210319002307.png"></p><p>现在你就可以抓以https开头的包了！</p><p>参考资料：</p><p><a href="https://www.anquanke.com/post/id/85925">https://www.anquanke.com/post/id/85925</a></p><p><a href="https://blog.csdn.net/zyw_anquan/article/details/47904495">https://blog.csdn.net/zyw_anquan/article/details/47904495</a></p><p><a href="https://blog.csdn.net/LUOBIKUN/article/details/87457545">https://blog.csdn.net/LUOBIKUN/article/details/87457545</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于一些原因换了台电脑，之前的抓包工具也没有了，所以想要重新下载burp suite来进行抓包测试&lt;/p&gt;
&lt;p&gt;以下的教程很大部分参考了&lt;</summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="burp suite" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/burp-suite/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="安装" scheme="https://thanyi.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的基本使用</title>
    <link href="https://thanyi.github.io/2021/03/05/003%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://thanyi.github.io/2021/03/05/003%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-08-06T08:02:07.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。</p><h2 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h2><p>正则表达式可以把它看做是一种通配符的增强版，它可以帮你匹配你想要的字符串。</p><p>在很多地方可以用到正则表达式，比如编译器中的词法分析器、网址上的注册表单、爬虫中用正则表达式来提取信息等等。所以我们可以更加深刻地理解正则表达式的用处之广，好多地方都不能缺少它。</p><p>以下是正则表达式正式内容，一些最基础的用法。</p><h1 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h1><p>限定符是一类特殊的字符，以下归纳：</p><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>?</td><td>表示之前的字符出现零次或者一次</td><td>end? –&gt; 表示en或者end</td></tr><tr><td>*</td><td>表示之前的字符出现零次或者多次</td><td>end* –&gt; 表示en或者enddddd 都行</td></tr><tr><td>+</td><td>表示之前的字符出现一次或者多次</td><td>end+ –&gt; 表示end或者endddddd</td></tr><tr><td>{…}</td><td>之中可以精确表示字符出现的次数</td><td>en{2}d –&gt; 表示ennd     en{2,3}d –&gt; 表示ennd或者ennnd</td></tr></tbody></table><p>如果想要限定多个运算符，比如ab，就直接打上括号再添加符号就行了，比如(ab)? 就表示 ab 或者空字符串。</p><h1 id="“或”运算符"><a href="#“或”运算符" class="headerlink" title="“或”运算符"></a>“或”运算符</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>|</td><td>两者之间的取或</td><td>a (cat|dog) –&gt; a cat 或者 a dog</td></tr></tbody></table><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>[…]</td><td>匹配 <strong>[…]</strong> 中的所有字符</td><td>[abc] 会匹配所有字符串中的a,b,c 的字符</td></tr><tr><td>[^…]</td><td>表示匹配除了[…]中字符以外的所有字符串</td><td>[^abc]会匹配所有字符串中除了a,b,c 的字符</td></tr></tbody></table><p>注：[a-z]表示所有的小写字符，[A-Z]表示所有大写字符，[a-zA-Z0-9]表示所有的英文字符和数字</p><p>[^0-9]表示所有的非数字字符(包括换行符)</p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符是一组正则表达式中预先定义好的一系列常用字符类型，比如数字、空白符、单词开头、单词结尾等。这些元字符中的大多数以反斜杠\ 开头</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>所有数字字符，等同于[0-9]</td></tr><tr><td>\w</td><td>单词字符，表示所有英文字符、数字和下划线</td></tr><tr><td>\s</td><td>空白符，包含tab字符以及换行符</td></tr><tr><td>\D</td><td>表示所有<strong>非数字字符</strong></td></tr><tr><td>\W</td><td>表示所有<strong>非单词字符</strong></td></tr><tr><td>\S</td><td>表示所有<strong>非空白字符</strong></td></tr><tr><td>.</td><td>表示所有任意的字符(不包括换行符)</td></tr><tr><td>^</td><td>匹配行首，^a 表示匹配所有行首的a</td></tr><tr><td>$</td><td>匹配行尾，a$表示匹配所有行尾的a</td></tr></tbody></table><h1 id="贪婪匹配和懒惰匹配-lazy-match"><a href="#贪婪匹配和懒惰匹配-lazy-match" class="headerlink" title="贪婪匹配和懒惰匹配(lazy match)"></a>贪婪匹配和懒惰匹配(lazy match)</h1><p>之前讲述?+{}之类的限定符的时候，都是默认匹配尽可能多的字符</p><p>比如我想要限定HTML文本中的字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用&lt;.*&gt; 来进行匹配，结果匹配下来的字符串会是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> this is an example <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为默认的贪婪匹配(greedy match)会匹配尽可能多的字符串，所以匹配了第一个</p><p>的左边”&lt;”和第二个</p><p>右边的”&gt;” 中间的所有字符串</p><p>解决方法：</p><p>使用&lt;.*?&gt;来讲贪婪匹配(greedy match)变成懒惰匹配(lazy match)</p><p>这样的话，匹配出来的字符串就会变成”p”和”p”两个标签</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846">https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;seid=10813203089957646846</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;正则表达式有些很难记住的理论，在这里一次性整理一下，帮助更深刻一点的掌控。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式是什么&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="学习" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="正则表达式" scheme="https://thanyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="正则表达式" scheme="https://thanyi.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于git的基本使用</title>
    <link href="https://thanyi.github.io/2021/02/25/002%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/"/>
    <id>https://thanyi.github.io/2021/02/25/002%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4/</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2021-12-07T14:39:21.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>git安装：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h2 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h2><ul><li>下载好Git后，点击右键，打开git bash here</li></ul><ul><li><p>开始绑定用户名和邮箱（注：用户名是你GitHub的用户名，邮箱是你GitHub的绑定邮箱，上传到gitee的话同理）</p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.name &quot;你的用户名&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225171909368.png"></p><h2 id="SSHkey-设置"><a href="#SSHkey-设置" class="headerlink" title="SSHkey 设置"></a>SSHkey 设置</h2><ul><li><p>在git bash中输入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -(路径) -&quot;github绑定邮箱&quot;</span><br></pre></td></tr></table></figure></li></ul><p>​        注：路径是指C盘或者D盘路径</p><p>​        例如：ssh-keygen -t rsa -C -“<a href="mailto:&#x31;&#x33;&#x31;&#x36;&#x35;&#x39;&#x34;&#49;&#x31;&#x35;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x31;&#x33;&#x31;&#x36;&#x35;&#x39;&#x34;&#49;&#x31;&#x35;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>“</p><p>​    输入后git bash中会有三次提醒输入操作<br>​            1）是路径确认，直接按回车存默认路径即可<br>​            2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦;<br>​            3）确认密码,直接回车键</p><p>​    （也就是说三次回车）</p><p>​    之后电脑C盘路径C:\Users\Administrator（电脑名）.ssh 下会生成 id_rsa.pub 文件，将其中内容复制下来</p><ul><li>在github上找到设置界面，找到其中的”SSH and GPG keys”，点击New SSH key</li></ul><p><img src="https://cdn.jsdelivr.net/gh/thanyi/image/2.png"></p><ul><li><p>在key输入框中将之前复制的内容输入，title可自定义<img src="https://cdn.jsdelivr.net/gh/thanyi/image/image-20210225173650772.png"></p><p>结束后即SSH keys绑定成功，前期所有准备结束</p></li></ul><h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><h2 id="git本地"><a href="#git本地" class="headerlink" title="git本地"></a>git本地</h2><ul><li><p>首先创建一个文件夹，文件夹中是我们已经写好的代码，之后Git命令操作都基于此文件夹</p><p>在文件夹路径下打开git bush</p><p>输入命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>初始化成功后原文件夹里多了一个隐藏文件夹.git </p><p>输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>即可上传 （代表将此文件夹里面的所有文件都保存在暂存区中）</p><p>然后以后的修改使用commit命令进行提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这里是备注内容&quot;</span><br></pre></td></tr></table></figure><p>这是将修改的内容提交到本地仓库</p><p>注：add是将代码提交到我们所谓的“缓存区”，而commit则是将我们在缓存区的代码提交到本地仓库。</p><p>​        git有好几个区，工作区（workspace）、暂存区（index）、本地仓库（local repository）、还有远程仓库（remote repository）</p></li></ul><h2 id="git提交到远程"><a href="#git提交到远程" class="headerlink" title="git提交到远程"></a>git提交到远程</h2><ul><li><p>在github上创建仓库</p></li><li><p>找到创建的仓库的地址(http地址、ssh地址)</p></li><li><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 你复制的地址</span><br></pre></td></tr></table></figure><p>注：创建了一个远程仓库名叫origin，和GitHub上的仓库建立了联系</p></li><li><p>然后，连接代码与远程的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull -u origin master</span><br></pre></td></tr></table></figure></li><li><p>最后，将本地仓库的代码传输到GitHub的仓库上，输入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>至此，代码到GitHub转换成功</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>git的一系列代码是如下的这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;这里是备注内容&quot;</span><br><span class="line">git remote add origin 你复制的地址</span><br><span class="line">git pull -u origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在本地写好代码了然后想要上传到GitHub的时候，使用git命令一直要忘记命令过程，现在把上传GitHub的命令过程整理一下&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="git" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/git/"/>
    
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="git" scheme="https://thanyi.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的博客搭建</title>
    <link href="https://thanyi.github.io/2021/02/24/001%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://thanyi.github.io/2021/02/24/001%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-24T06:31:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于hexo的博客搭建"><a href="#关于hexo的博客搭建" class="headerlink" title="关于hexo的博客搭建"></a>关于hexo的博客搭建</h1><h1 id="关于前言"><a href="#关于前言" class="headerlink" title="关于前言"></a>关于前言</h1><p>这是我第一次的博客介绍，仅供参考</p><p>这个博客的搭建弄了很多天，因为之前电脑总是经历了千奇百怪的bug，但在朋友的帮助下还是成功（应该算是成功吧）把这个博客搭建了起来。仔细一想好像真的白嫖了好多东西哈哈。</p><hr><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>node.js下载、git安装</p><p>推荐教程：<a href="https://blog.csdn.net/antma/article/details/86104068">https://blog.csdn.net/antma/article/details/86104068</a>   node.js安装</p><p>​                    <a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a>    git安装</p><ul><li><p>注1：由于node.js版本过高的话会和hexo版本发生冲突导致报错，推荐node版本不超过12.x版本，可以使用nvm进行版本控制，</p><p>nvm的教程：<a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a> </p><p>当然也可以寻找其他版本的教程</p></li><li><p>注2：nodejs下载速度过慢的时候，是因为服务器在国外的原因，可以用国内的镜像来解决</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="进行搭建"><a href="#进行搭建" class="headerlink" title="进行搭建"></a>进行搭建</h2><ul><li><p>hexo的安装</p><p>在命令行中输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>当然在具有淘宝镜像以后就是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p>等待过后便安装完成</p></li><li><p>博客初始化</p><p>首先新创建一个文件夹</p><p>然后在文件夹里进行命令行输入    </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>创建了文档，且初始化完成。</p><p>注意：以后的操作都基于此文件夹，若出现严重bug可以删除此文件夹重新初始化hexo博客框架</p></li><li><p>以下是部分常用命令操作</p><p>本地服务器建立</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>清理缓存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>向网站部署</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p>以上，本地博客便搭建成功</p><hr><h1 id="关于远端部署"><a href="#关于远端部署" class="headerlink" title="关于远端部署"></a>关于远端部署</h1><p>​        本地博客搭建成功了就要部署到远端网站方便其他人查看，我这里用码云（gitee）来做示例，大家也可以使用github，两者用法几乎相同</p><p>​        当然也可以购买服务器不过相对部署在GitHub和Gitee上就比较麻烦一点</p><ul><li><p>首先创建一个仓库</p><p>注意如果是GitHub的话仓库名必须固定：账号名.github.io（例如thanyi.github.io）</p><p>但是在码云没有这个要求</p></li><li><p>在新建的文件夹使用命令安装一个和git相关的插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -<span class="literal">-save</span> hexo<span class="literal">-deployer</span><span class="literal">-git</span></span><br></pre></td></tr></table></figure></li><li><p>文件夹中有名为”_config.yml”的文件，打开文件，在最底部的# Deployment模块输入相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://gitee.com/xxx/xxx.git</span><span class="comment">#这里填你的仓库的http地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>保存</p></li><li><p>部署到远端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就成功部署到远端了</p><p>注意：部署到远端之前需要先生成静态文件，命令在上方</p></li><li><p>在gitee的仓库右方<strong>服务</strong>下方的<strong>Gitee</strong>的下方的page按钮，点击进入部署页面，进行部署。</p><p>gitee会为你提供你的部署网址，这就是你的博客网址了</p></li></ul><hr><h1 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h1><p>主题方面有很多做法，我用的是butterfly主题，它的使用连接如下：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于hexo的博客搭建&quot;&gt;&lt;a href=&quot;#关于hexo的博客搭建&quot; class=&quot;headerlink&quot; title=&quot;关于hexo的博客搭建&quot;&gt;&lt;/a&gt;关于hexo的博客搭建&lt;/h1&gt;&lt;h1 id=&quot;关于前言&quot;&gt;&lt;a href=&quot;#关于前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="教程" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="hexo" scheme="https://thanyi.github.io/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
    <category term="hexo" scheme="https://thanyi.github.io/tags/hexo/"/>
    
    <category term="技术" scheme="https://thanyi.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
